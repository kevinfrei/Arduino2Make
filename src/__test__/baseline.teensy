# First, add some errors for undefined values
ifndef PROJ_NAME
  $(error PROJ_NAME is not defined!)
endif
ifndef BOARD_NAME
  $(error BOARD_NAME is not defined!)
endif
ifndef IN_USB
  $(error IN_USB is not defined!)
endif
ifndef IN_SPEED
  $(error IN_SPEED is not defined!)
endif
ifndef IN_OPT
  $(error IN_OPT is not defined!)
endif
ifndef IN_KEYS
  $(error IN_KEYS is not defined!)
endif
ifndef EXTRA_TIME_LOCAL
  $(error EXTRA_TIME_LOCAL is not defined!)
endif
ifndef RUNTIME_HARDWARE_PATH
  $(error RUNTIME_HARDWARE_PATH is not defined!)
endif
ifndef CMD_PATH
  $(error CMD_PATH is not defined!)
endif
ifndef BUILD_PATH
  $(error BUILD_PATH is not defined!)
endif
ifndef SERIAL_PORT
  $(error SERIAL_PORT is not defined!)
endif
ifndef SERIAL_PORT_LABEL
  $(error SERIAL_PORT_LABEL is not defined!)
endif
ifndef SERIAL_PORT_PROTOCOL
  $(error SERIAL_PORT_PROTOCOL is not defined!)
endif

# Check for some source files
ifeq (${USER_C_SRCS}${USER_CPP_SRCS}${USER_S_SRCS},)
  $(error You must define USER_C_SRCS, USER_CPP_SRCS, or USER_S_SRCS)
endif

# And here are all the definitions
ifeq ($(OS), Windows_NT)
  RUNTIME_OS=windows
else
  uname=$(shell uname -s)
  ifeq ($(uname), Darwin)
    RUNTIME_OS=macosx
  endif
endif
RUNTIME_OS?=linux
RUNTIME_PLATFORM_PATH=src/__test__/hardware/teensy/avr
RUNTIME_IDE_VERSION=10819
IDE_VERSION=10819
BUILD_PROJECT_NAME=${PROJ_NAME}
ifeq (${BOARD_NAME}, teensy41)
  SERIAL_RESTART_CMD=false
  UPLOAD_PORT_MODELID=0x25
  UPLOAD_PROTOCOL=teensy
  UPLOAD_TOOL=teensyloader
  UPLOAD_TOOL_TEENSY=teensyloader
  UPLOAD_TOOL_DEFAULT=teensyloader
  BUILD_COMMAND_SIZE=arm-none-eabi-size
  BUILD_COMMAND_LINKER=arm-none-eabi-gcc
  BUILD_COMMAND_OBJDUMP=arm-none-eabi-objdump
  BUILD_COMMAND_OBJCOPY=arm-none-eabi-objcopy
  BUILD_COMMAND_AR=arm-none-eabi-gcc-ar
  BUILD_COMMAND_G__=arm-none-eabi-g++
  BUILD_COMMAND_GCC=arm-none-eabi-gcc
  BUILD_TOOLCHAIN=arm/bin/
  BUILD_WARN_DATA_PERCENTAGE=99
  BUILD_MCU=imxrt1062
  BUILD_CORE=teensy4
  BUILD_FLAGS_LIBS=-larm_cortexM7lfsp_math -lm -lstdc++
  BUILD_FLAGS_S=-x assembler-with-cpp
  BUILD_FLAGS_CPP=-std=gnu++14 -fno-exceptions -fpermissive -fno-rtti -fno-threadsafe-statics -felide-constructors -Wno-error=narrowing
  BUILD_FLAGS_DEFS=-D__IMXRT1062__ -DTEENSYDUINO=157
  BUILD_FLAGS_CPU=-mthumb -mcpu=cortex-m7 -mfloat-abi=hard -mfpu=fpv5-d16
  BUILD_FLAGS_OPTIMIZE=-Os
  BUILD_FLAGS_DEP=-MMD
  BUILD_FLAGS_COMMON=-g -Wall -ffunction-sections -fdata-sections -nostdlib
  BUILD_BOARD=TEENSY41
  NAME=Teensy 4.1
  ifeq (${IN_USB}, serial)
    UPLOAD_PORT_USBTYPE=USB_SERIAL
    BUILD_USBTYPE=USB_SERIAL
  else ifeq (${IN_USB}, serial2)
    UPLOAD_PORT_USBTYPE=USB_DUAL_SERIAL
    BUILD_USBTYPE=USB_DUAL_SERIAL
  else ifeq (${IN_USB}, serial3)
    UPLOAD_PORT_USBTYPE=USB_TRIPLE_SERIAL
    BUILD_USBTYPE=USB_TRIPLE_SERIAL
  else ifeq (${IN_USB}, keyboard)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_KEYBOARDONLY
    BUILD_USBTYPE=USB_KEYBOARDONLY
  else ifeq (${IN_USB}, touch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_TOUCHSCREEN
    BUILD_USBTYPE=USB_TOUCHSCREEN
  else ifeq (${IN_USB}, hidtouch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID_TOUCHSCREEN
    BUILD_USBTYPE=USB_HID_TOUCHSCREEN
  else ifeq (${IN_USB}, hid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID
    BUILD_USBTYPE=USB_HID
  else ifeq (${IN_USB}, serialhid)
    UPLOAD_PORT_USBTYPE=USB_SERIAL_HID
    BUILD_USBTYPE=USB_SERIAL_HID
  else ifeq (${IN_USB}, midi)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI
    BUILD_USBTYPE=USB_MIDI
  else ifeq (${IN_USB}, midi4)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI4
    BUILD_USBTYPE=USB_MIDI4
  else ifeq (${IN_USB}, midi16)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI16
    BUILD_USBTYPE=USB_MIDI16
  else ifeq (${IN_USB}, serialmidi)
    UPLOAD_PORT_USBTYPE=USB_MIDI_SERIAL
    BUILD_USBTYPE=USB_MIDI_SERIAL
  else ifeq (${IN_USB}, serialmidi4)
    UPLOAD_PORT_USBTYPE=USB_MIDI4_SERIAL
    BUILD_USBTYPE=USB_MIDI4_SERIAL
  else ifeq (${IN_USB}, serialmidi16)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_SERIAL
    BUILD_USBTYPE=USB_MIDI16_SERIAL
  else ifeq (${IN_USB}, audio)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_AUDIO
    BUILD_USBTYPE=USB_AUDIO
  else ifeq (${IN_USB}, serialmidiaudio)
    UPLOAD_PORT_USBTYPE=USB_MIDI_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI_AUDIO_SERIAL
  else ifeq (${IN_USB}, serialmidi16audio)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI16_AUDIO_SERIAL
  else ifeq (${IN_USB}, mtp)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MTPDISK
    BUILD_USBTYPE=USB_MTPDISK
  else ifeq (${IN_USB}, serialmtp)
    UPLOAD_PORT_USBTYPE=USB_MTPDISK_SERIAL
    BUILD_USBTYPE=USB_MTPDISK_SERIAL
  else ifeq (${IN_USB}, rawhid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_RAWHID
    BUILD_USBTYPE=USB_RAWHID
  else ifeq (${IN_USB}, flightsim)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM
    BUILD_USBTYPE=USB_FLIGHTSIM
  else ifeq (${IN_USB}, flightsimjoystick)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM_JOYSTICK
    BUILD_USBTYPE=USB_FLIGHTSIM_JOYSTICK
  endif
  ifeq (${IN_SPEED}, 600)
    BUILD_FCPU=600000000
  else ifeq (${IN_SPEED}, 528)
    BUILD_FCPU=528000000
  else ifeq (${IN_SPEED}, 450)
    BUILD_FCPU=450000000
  else ifeq (${IN_SPEED}, 396)
    BUILD_FCPU=396000000
  else ifeq (${IN_SPEED}, 150)
    BUILD_FCPU=150000000
  else ifeq (${IN_SPEED}, 24)
    BUILD_FCPU=24000000
  else ifeq (${IN_SPEED}, 720)
    BUILD_FCPU=720000000
  else ifeq (${IN_SPEED}, 816)
    BUILD_FCPU=816000000
  else ifeq (${IN_SPEED}, 912)
    BUILD_FCPU=912000000
  else ifeq (${IN_SPEED}, 960)
    BUILD_FCPU=960000000
  else ifeq (${IN_SPEED}, 1008)
    BUILD_FCPU=1008000000
  endif
  ifeq (${IN_OPT}, o2std)
    BUILD_FLAGS_OPTIMIZE=-O2
  else ifeq (${IN_OPT}, o1std)
    BUILD_FLAGS_OPTIMIZE=-O1
  else ifeq (${IN_OPT}, o3std)
    BUILD_FLAGS_OPTIMIZE=-O3
  else ifeq (${IN_OPT}, ogstd)
    BUILD_FLAGS_OPTIMIZE=-Og
  else ifeq (${IN_OPT}, osstd)
    BUILD_FLAGS_OPTIMIZE=-Os --specs=nano.specs
  endif
  ifeq (${IN_KEYS}, en-us)
    BUILD_KEYLAYOUT=US_ENGLISH
  else ifeq (${IN_KEYS}, fr-ca)
    BUILD_KEYLAYOUT=CANADIAN_FRENCH
  else ifeq (${IN_KEYS}, xx-ca)
    BUILD_KEYLAYOUT=CANADIAN_MULTILINGUAL
  else ifeq (${IN_KEYS}, cz-cz)
    BUILD_KEYLAYOUT=CZECH
  else ifeq (${IN_KEYS}, da-da)
    BUILD_KEYLAYOUT=DANISH
  else ifeq (${IN_KEYS}, fi-fi)
    BUILD_KEYLAYOUT=FINNISH
  else ifeq (${IN_KEYS}, fr-fr)
    BUILD_KEYLAYOUT=FRENCH
  else ifeq (${IN_KEYS}, fr-be)
    BUILD_KEYLAYOUT=FRENCH_BELGIAN
  else ifeq (${IN_KEYS}, fr-ch)
    BUILD_KEYLAYOUT=FRENCH_SWISS
  else ifeq (${IN_KEYS}, de-de)
    BUILD_KEYLAYOUT=GERMAN
  else ifeq (${IN_KEYS}, de-dm)
    BUILD_KEYLAYOUT=GERMAN_MAC
  else ifeq (${IN_KEYS}, de-ch)
    BUILD_KEYLAYOUT=GERMAN_SWISS
  else ifeq (${IN_KEYS}, is-is)
    BUILD_KEYLAYOUT=ICELANDIC
  else ifeq (${IN_KEYS}, en-ie)
    BUILD_KEYLAYOUT=IRISH
  else ifeq (${IN_KEYS}, it-it)
    BUILD_KEYLAYOUT=ITALIAN
  else ifeq (${IN_KEYS}, no-no)
    BUILD_KEYLAYOUT=NORWEGIAN
  else ifeq (${IN_KEYS}, pt-pt)
    BUILD_KEYLAYOUT=PORTUGUESE
  else ifeq (${IN_KEYS}, pt-br)
    BUILD_KEYLAYOUT=PORTUGUESE_BRAZILIAN
  else ifeq (${IN_KEYS}, rs-rs)
    BUILD_KEYLAYOUT=SERBIAN_LATIN_ONLY
  else ifeq (${IN_KEYS}, es-es)
    BUILD_KEYLAYOUT=SPANISH
  else ifeq (${IN_KEYS}, es-mx)
    BUILD_KEYLAYOUT=SPANISH_LATIN_AMERICA
  else ifeq (${IN_KEYS}, sv-se)
    BUILD_KEYLAYOUT=SWEDISH
  else ifeq (${IN_KEYS}, tr-tr)
    BUILD_KEYLAYOUT=TURKISH
  else ifeq (${IN_KEYS}, en-gb)
    BUILD_KEYLAYOUT=UNITED_KINGDOM
  else ifeq (${IN_KEYS}, usint)
    BUILD_KEYLAYOUT=US_INTERNATIONAL
  endif
else ifeq (${BOARD_NAME}, teensyMM)
  SERIAL_RESTART_CMD=false
  UPLOAD_PORT_MODELID=0x26
  UPLOAD_PROTOCOL=teensy
  UPLOAD_TOOL=teensyloader
  UPLOAD_TOOL_TEENSY=teensyloader
  UPLOAD_TOOL_DEFAULT=teensyloader
  BUILD_COMMAND_SIZE=arm-none-eabi-size
  BUILD_COMMAND_LINKER=arm-none-eabi-gcc
  BUILD_COMMAND_OBJDUMP=arm-none-eabi-objdump
  BUILD_COMMAND_OBJCOPY=arm-none-eabi-objcopy
  BUILD_COMMAND_AR=arm-none-eabi-gcc-ar
  BUILD_COMMAND_G__=arm-none-eabi-g++
  BUILD_COMMAND_GCC=arm-none-eabi-gcc
  BUILD_TOOLCHAIN=arm/bin/
  BUILD_WARN_DATA_PERCENTAGE=99
  BUILD_MCU=imxrt1062
  BUILD_CORE=teensy4
  BUILD_FLAGS_LIBS=-larm_cortexM7lfsp_math -lm -lstdc++
  BUILD_FLAGS_S=-x assembler-with-cpp
  BUILD_FLAGS_CPP=-std=gnu++14 -fno-exceptions -fpermissive -fno-rtti -fno-threadsafe-statics -felide-constructors -Wno-error=narrowing
  BUILD_FLAGS_DEFS=-D__IMXRT1062__ -DTEENSYDUINO=157
  BUILD_FLAGS_CPU=-mthumb -mcpu=cortex-m7 -mfloat-abi=hard -mfpu=fpv5-d16
  BUILD_FLAGS_OPTIMIZE=-Os
  BUILD_FLAGS_DEP=-MMD
  BUILD_FLAGS_COMMON=-g -Wall -ffunction-sections -fdata-sections -nostdlib
  BUILD_BOARD=TEENSY_MICROMOD
  NAME=Teensy MicroMod
  ifeq (${IN_USB}, serial)
    UPLOAD_PORT_USBTYPE=USB_SERIAL
    BUILD_USBTYPE=USB_SERIAL
  else ifeq (${IN_USB}, serial2)
    UPLOAD_PORT_USBTYPE=USB_DUAL_SERIAL
    BUILD_USBTYPE=USB_DUAL_SERIAL
  else ifeq (${IN_USB}, serial3)
    UPLOAD_PORT_USBTYPE=USB_TRIPLE_SERIAL
    BUILD_USBTYPE=USB_TRIPLE_SERIAL
  else ifeq (${IN_USB}, keyboard)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_KEYBOARDONLY
    BUILD_USBTYPE=USB_KEYBOARDONLY
  else ifeq (${IN_USB}, touch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_TOUCHSCREEN
    BUILD_USBTYPE=USB_TOUCHSCREEN
  else ifeq (${IN_USB}, hidtouch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID_TOUCHSCREEN
    BUILD_USBTYPE=USB_HID_TOUCHSCREEN
  else ifeq (${IN_USB}, hid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID
    BUILD_USBTYPE=USB_HID
  else ifeq (${IN_USB}, serialhid)
    UPLOAD_PORT_USBTYPE=USB_SERIAL_HID
    BUILD_USBTYPE=USB_SERIAL_HID
  else ifeq (${IN_USB}, midi)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI
    BUILD_USBTYPE=USB_MIDI
  else ifeq (${IN_USB}, midi4)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI4
    BUILD_USBTYPE=USB_MIDI4
  else ifeq (${IN_USB}, midi16)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI16
    BUILD_USBTYPE=USB_MIDI16
  else ifeq (${IN_USB}, serialmidi)
    UPLOAD_PORT_USBTYPE=USB_MIDI_SERIAL
    BUILD_USBTYPE=USB_MIDI_SERIAL
  else ifeq (${IN_USB}, serialmidi4)
    UPLOAD_PORT_USBTYPE=USB_MIDI4_SERIAL
    BUILD_USBTYPE=USB_MIDI4_SERIAL
  else ifeq (${IN_USB}, serialmidi16)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_SERIAL
    BUILD_USBTYPE=USB_MIDI16_SERIAL
  else ifeq (${IN_USB}, audio)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_AUDIO
    BUILD_USBTYPE=USB_AUDIO
  else ifeq (${IN_USB}, serialmidiaudio)
    UPLOAD_PORT_USBTYPE=USB_MIDI_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI_AUDIO_SERIAL
  else ifeq (${IN_USB}, serialmidi16audio)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI16_AUDIO_SERIAL
  else ifeq (${IN_USB}, mtp)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MTPDISK
    BUILD_USBTYPE=USB_MTPDISK
  else ifeq (${IN_USB}, serialmtp)
    UPLOAD_PORT_USBTYPE=USB_MTPDISK_SERIAL
    BUILD_USBTYPE=USB_MTPDISK_SERIAL
  else ifeq (${IN_USB}, rawhid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_RAWHID
    BUILD_USBTYPE=USB_RAWHID
  else ifeq (${IN_USB}, flightsim)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM
    BUILD_USBTYPE=USB_FLIGHTSIM
  else ifeq (${IN_USB}, flightsimjoystick)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM_JOYSTICK
    BUILD_USBTYPE=USB_FLIGHTSIM_JOYSTICK
  endif
  ifeq (${IN_SPEED}, 600)
    BUILD_FCPU=600000000
  else ifeq (${IN_SPEED}, 528)
    BUILD_FCPU=528000000
  else ifeq (${IN_SPEED}, 450)
    BUILD_FCPU=450000000
  else ifeq (${IN_SPEED}, 396)
    BUILD_FCPU=396000000
  else ifeq (${IN_SPEED}, 150)
    BUILD_FCPU=150000000
  else ifeq (${IN_SPEED}, 24)
    BUILD_FCPU=24000000
  else ifeq (${IN_SPEED}, 720)
    BUILD_FCPU=720000000
  else ifeq (${IN_SPEED}, 816)
    BUILD_FCPU=816000000
  else ifeq (${IN_SPEED}, 912)
    BUILD_FCPU=912000000
  else ifeq (${IN_SPEED}, 960)
    BUILD_FCPU=960000000
  else ifeq (${IN_SPEED}, 1008)
    BUILD_FCPU=1008000000
  endif
  ifeq (${IN_OPT}, o2std)
    BUILD_FLAGS_OPTIMIZE=-O2
  else ifeq (${IN_OPT}, o1std)
    BUILD_FLAGS_OPTIMIZE=-O1
  else ifeq (${IN_OPT}, o3std)
    BUILD_FLAGS_OPTIMIZE=-O3
  else ifeq (${IN_OPT}, ogstd)
    BUILD_FLAGS_OPTIMIZE=-Og
  else ifeq (${IN_OPT}, osstd)
    BUILD_FLAGS_OPTIMIZE=-Os --specs=nano.specs
  endif
  ifeq (${IN_KEYS}, en-us)
    BUILD_KEYLAYOUT=US_ENGLISH
  else ifeq (${IN_KEYS}, fr-ca)
    BUILD_KEYLAYOUT=CANADIAN_FRENCH
  else ifeq (${IN_KEYS}, xx-ca)
    BUILD_KEYLAYOUT=CANADIAN_MULTILINGUAL
  else ifeq (${IN_KEYS}, cz-cz)
    BUILD_KEYLAYOUT=CZECH
  else ifeq (${IN_KEYS}, da-da)
    BUILD_KEYLAYOUT=DANISH
  else ifeq (${IN_KEYS}, fi-fi)
    BUILD_KEYLAYOUT=FINNISH
  else ifeq (${IN_KEYS}, fr-fr)
    BUILD_KEYLAYOUT=FRENCH
  else ifeq (${IN_KEYS}, fr-be)
    BUILD_KEYLAYOUT=FRENCH_BELGIAN
  else ifeq (${IN_KEYS}, fr-ch)
    BUILD_KEYLAYOUT=FRENCH_SWISS
  else ifeq (${IN_KEYS}, de-de)
    BUILD_KEYLAYOUT=GERMAN
  else ifeq (${IN_KEYS}, de-dm)
    BUILD_KEYLAYOUT=GERMAN_MAC
  else ifeq (${IN_KEYS}, de-ch)
    BUILD_KEYLAYOUT=GERMAN_SWISS
  else ifeq (${IN_KEYS}, is-is)
    BUILD_KEYLAYOUT=ICELANDIC
  else ifeq (${IN_KEYS}, en-ie)
    BUILD_KEYLAYOUT=IRISH
  else ifeq (${IN_KEYS}, it-it)
    BUILD_KEYLAYOUT=ITALIAN
  else ifeq (${IN_KEYS}, no-no)
    BUILD_KEYLAYOUT=NORWEGIAN
  else ifeq (${IN_KEYS}, pt-pt)
    BUILD_KEYLAYOUT=PORTUGUESE
  else ifeq (${IN_KEYS}, pt-br)
    BUILD_KEYLAYOUT=PORTUGUESE_BRAZILIAN
  else ifeq (${IN_KEYS}, rs-rs)
    BUILD_KEYLAYOUT=SERBIAN_LATIN_ONLY
  else ifeq (${IN_KEYS}, es-es)
    BUILD_KEYLAYOUT=SPANISH
  else ifeq (${IN_KEYS}, es-mx)
    BUILD_KEYLAYOUT=SPANISH_LATIN_AMERICA
  else ifeq (${IN_KEYS}, sv-se)
    BUILD_KEYLAYOUT=SWEDISH
  else ifeq (${IN_KEYS}, tr-tr)
    BUILD_KEYLAYOUT=TURKISH
  else ifeq (${IN_KEYS}, en-gb)
    BUILD_KEYLAYOUT=UNITED_KINGDOM
  else ifeq (${IN_KEYS}, usint)
    BUILD_KEYLAYOUT=US_INTERNATIONAL
  endif
else ifeq (${BOARD_NAME}, teensy40)
  SERIAL_RESTART_CMD=false
  UPLOAD_PORT_MODELID=0x24
  UPLOAD_PROTOCOL=teensy
  UPLOAD_TOOL=teensyloader
  UPLOAD_TOOL_TEENSY=teensyloader
  UPLOAD_TOOL_DEFAULT=teensyloader
  BUILD_COMMAND_SIZE=arm-none-eabi-size
  BUILD_COMMAND_LINKER=arm-none-eabi-gcc
  BUILD_COMMAND_OBJDUMP=arm-none-eabi-objdump
  BUILD_COMMAND_OBJCOPY=arm-none-eabi-objcopy
  BUILD_COMMAND_AR=arm-none-eabi-gcc-ar
  BUILD_COMMAND_G__=arm-none-eabi-g++
  BUILD_COMMAND_GCC=arm-none-eabi-gcc
  BUILD_TOOLCHAIN=arm/bin/
  BUILD_WARN_DATA_PERCENTAGE=99
  BUILD_MCU=imxrt1062
  BUILD_CORE=teensy4
  BUILD_FLAGS_LIBS=-larm_cortexM7lfsp_math -lm -lstdc++
  BUILD_FLAGS_S=-x assembler-with-cpp
  BUILD_FLAGS_CPP=-std=gnu++14 -fno-exceptions -fpermissive -fno-rtti -fno-threadsafe-statics -felide-constructors -Wno-error=narrowing
  BUILD_FLAGS_DEFS=-D__IMXRT1062__ -DTEENSYDUINO=157
  BUILD_FLAGS_CPU=-mthumb -mcpu=cortex-m7 -mfloat-abi=hard -mfpu=fpv5-d16
  BUILD_FLAGS_OPTIMIZE=-Os
  BUILD_FLAGS_DEP=-MMD
  BUILD_FLAGS_COMMON=-g -Wall -ffunction-sections -fdata-sections -nostdlib
  BUILD_BOARD=TEENSY40
  NAME=Teensy 4.0
  ifeq (${IN_USB}, serial)
    UPLOAD_PORT_USBTYPE=USB_SERIAL
    BUILD_USBTYPE=USB_SERIAL
  else ifeq (${IN_USB}, serial2)
    UPLOAD_PORT_USBTYPE=USB_DUAL_SERIAL
    BUILD_USBTYPE=USB_DUAL_SERIAL
  else ifeq (${IN_USB}, serial3)
    UPLOAD_PORT_USBTYPE=USB_TRIPLE_SERIAL
    BUILD_USBTYPE=USB_TRIPLE_SERIAL
  else ifeq (${IN_USB}, keyboard)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_KEYBOARDONLY
    BUILD_USBTYPE=USB_KEYBOARDONLY
  else ifeq (${IN_USB}, touch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_TOUCHSCREEN
    BUILD_USBTYPE=USB_TOUCHSCREEN
  else ifeq (${IN_USB}, hidtouch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID_TOUCHSCREEN
    BUILD_USBTYPE=USB_HID_TOUCHSCREEN
  else ifeq (${IN_USB}, hid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID
    BUILD_USBTYPE=USB_HID
  else ifeq (${IN_USB}, serialhid)
    UPLOAD_PORT_USBTYPE=USB_SERIAL_HID
    BUILD_USBTYPE=USB_SERIAL_HID
  else ifeq (${IN_USB}, midi)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI
    BUILD_USBTYPE=USB_MIDI
  else ifeq (${IN_USB}, midi4)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI4
    BUILD_USBTYPE=USB_MIDI4
  else ifeq (${IN_USB}, midi16)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI16
    BUILD_USBTYPE=USB_MIDI16
  else ifeq (${IN_USB}, serialmidi)
    UPLOAD_PORT_USBTYPE=USB_MIDI_SERIAL
    BUILD_USBTYPE=USB_MIDI_SERIAL
  else ifeq (${IN_USB}, serialmidi4)
    UPLOAD_PORT_USBTYPE=USB_MIDI4_SERIAL
    BUILD_USBTYPE=USB_MIDI4_SERIAL
  else ifeq (${IN_USB}, serialmidi16)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_SERIAL
    BUILD_USBTYPE=USB_MIDI16_SERIAL
  else ifeq (${IN_USB}, audio)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_AUDIO
    BUILD_USBTYPE=USB_AUDIO
  else ifeq (${IN_USB}, serialmidiaudio)
    UPLOAD_PORT_USBTYPE=USB_MIDI_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI_AUDIO_SERIAL
  else ifeq (${IN_USB}, serialmidi16audio)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI16_AUDIO_SERIAL
  else ifeq (${IN_USB}, mtp)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MTPDISK
    BUILD_USBTYPE=USB_MTPDISK
  else ifeq (${IN_USB}, serialmtp)
    UPLOAD_PORT_USBTYPE=USB_MTPDISK_SERIAL
    BUILD_USBTYPE=USB_MTPDISK_SERIAL
  else ifeq (${IN_USB}, rawhid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_RAWHID
    BUILD_USBTYPE=USB_RAWHID
  else ifeq (${IN_USB}, flightsim)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM
    BUILD_USBTYPE=USB_FLIGHTSIM
  else ifeq (${IN_USB}, flightsimjoystick)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM_JOYSTICK
    BUILD_USBTYPE=USB_FLIGHTSIM_JOYSTICK
  endif
  ifeq (${IN_SPEED}, 600)
    BUILD_FCPU=600000000
  else ifeq (${IN_SPEED}, 528)
    BUILD_FCPU=528000000
  else ifeq (${IN_SPEED}, 450)
    BUILD_FCPU=450000000
  else ifeq (${IN_SPEED}, 396)
    BUILD_FCPU=396000000
  else ifeq (${IN_SPEED}, 150)
    BUILD_FCPU=150000000
  else ifeq (${IN_SPEED}, 24)
    BUILD_FCPU=24000000
  else ifeq (${IN_SPEED}, 720)
    BUILD_FCPU=720000000
  else ifeq (${IN_SPEED}, 816)
    BUILD_FCPU=816000000
  else ifeq (${IN_SPEED}, 912)
    BUILD_FCPU=912000000
  else ifeq (${IN_SPEED}, 960)
    BUILD_FCPU=960000000
  else ifeq (${IN_SPEED}, 1008)
    BUILD_FCPU=1008000000
  endif
  ifeq (${IN_OPT}, o2std)
    BUILD_FLAGS_OPTIMIZE=-O2
  else ifeq (${IN_OPT}, o1std)
    BUILD_FLAGS_OPTIMIZE=-O1
  else ifeq (${IN_OPT}, o3std)
    BUILD_FLAGS_OPTIMIZE=-O3
  else ifeq (${IN_OPT}, ogstd)
    BUILD_FLAGS_OPTIMIZE=-Og
  else ifeq (${IN_OPT}, osstd)
    BUILD_FLAGS_OPTIMIZE=-Os --specs=nano.specs
  endif
  ifeq (${IN_KEYS}, en-us)
    BUILD_KEYLAYOUT=US_ENGLISH
  else ifeq (${IN_KEYS}, fr-ca)
    BUILD_KEYLAYOUT=CANADIAN_FRENCH
  else ifeq (${IN_KEYS}, xx-ca)
    BUILD_KEYLAYOUT=CANADIAN_MULTILINGUAL
  else ifeq (${IN_KEYS}, cz-cz)
    BUILD_KEYLAYOUT=CZECH
  else ifeq (${IN_KEYS}, da-da)
    BUILD_KEYLAYOUT=DANISH
  else ifeq (${IN_KEYS}, fi-fi)
    BUILD_KEYLAYOUT=FINNISH
  else ifeq (${IN_KEYS}, fr-fr)
    BUILD_KEYLAYOUT=FRENCH
  else ifeq (${IN_KEYS}, fr-be)
    BUILD_KEYLAYOUT=FRENCH_BELGIAN
  else ifeq (${IN_KEYS}, fr-ch)
    BUILD_KEYLAYOUT=FRENCH_SWISS
  else ifeq (${IN_KEYS}, de-de)
    BUILD_KEYLAYOUT=GERMAN
  else ifeq (${IN_KEYS}, de-dm)
    BUILD_KEYLAYOUT=GERMAN_MAC
  else ifeq (${IN_KEYS}, de-ch)
    BUILD_KEYLAYOUT=GERMAN_SWISS
  else ifeq (${IN_KEYS}, is-is)
    BUILD_KEYLAYOUT=ICELANDIC
  else ifeq (${IN_KEYS}, en-ie)
    BUILD_KEYLAYOUT=IRISH
  else ifeq (${IN_KEYS}, it-it)
    BUILD_KEYLAYOUT=ITALIAN
  else ifeq (${IN_KEYS}, no-no)
    BUILD_KEYLAYOUT=NORWEGIAN
  else ifeq (${IN_KEYS}, pt-pt)
    BUILD_KEYLAYOUT=PORTUGUESE
  else ifeq (${IN_KEYS}, pt-br)
    BUILD_KEYLAYOUT=PORTUGUESE_BRAZILIAN
  else ifeq (${IN_KEYS}, rs-rs)
    BUILD_KEYLAYOUT=SERBIAN_LATIN_ONLY
  else ifeq (${IN_KEYS}, es-es)
    BUILD_KEYLAYOUT=SPANISH
  else ifeq (${IN_KEYS}, es-mx)
    BUILD_KEYLAYOUT=SPANISH_LATIN_AMERICA
  else ifeq (${IN_KEYS}, sv-se)
    BUILD_KEYLAYOUT=SWEDISH
  else ifeq (${IN_KEYS}, tr-tr)
    BUILD_KEYLAYOUT=TURKISH
  else ifeq (${IN_KEYS}, en-gb)
    BUILD_KEYLAYOUT=UNITED_KINGDOM
  else ifeq (${IN_KEYS}, usint)
    BUILD_KEYLAYOUT=US_INTERNATIONAL
  endif
else ifeq (${BOARD_NAME}, teensy36)
  SERIAL_RESTART_CMD=false
  BUILD_FLAGS_LIBS=-larm_cortexM4lf_math -lm -lstdc++
  BUILD_FLAGS_S=-x assembler-with-cpp
  BUILD_FLAGS_CPP=-fno-exceptions -fpermissive -felide-constructors -std=gnu++14 -Wno-error=narrowing -fno-rtti
  BUILD_FLAGS_DEFS=-D__MK66FX1M0__ -DTEENSYDUINO=157
  BUILD_FLAGS_CPU=-mthumb -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fsingle-precision-constant
  BUILD_FLAGS_OPTIMIZE=-Os
  BUILD_FLAGS_DEP=-MMD
  BUILD_FLAGS_COMMON=-g -Wall -ffunction-sections -fdata-sections -nostdlib -mno-unaligned-access
  BUILD_COMMAND_SIZE=arm-none-eabi-size
  BUILD_COMMAND_LINKER=arm-none-eabi-gcc
  BUILD_COMMAND_OBJDUMP=arm-none-eabi-objdump
  BUILD_COMMAND_OBJCOPY=arm-none-eabi-objcopy
  BUILD_COMMAND_AR=arm-none-eabi-gcc-ar
  BUILD_COMMAND_G__=arm-none-eabi-g++
  BUILD_COMMAND_GCC=arm-none-eabi-gcc
  BUILD_TOOLCHAIN=arm/bin/
  BUILD_WARN_DATA_PERCENTAGE=99
  BUILD_MCU=mk66fx1m0
  BUILD_CORE=teensy3
  BUILD_BOARD=TEENSY36
  UPLOAD_PORT_MODELID=0x22
  UPLOAD_PROTOCOL=teensy
  UPLOAD_TOOL=teensyloader
  UPLOAD_TOOL_TEENSY=teensyloader
  UPLOAD_TOOL_DEFAULT=teensyloader
  UPLOAD_MAXIMUM_DATA_SIZE=262144
  UPLOAD_MAXIMUM_SIZE=1048576
  NAME=Teensy 3.6
  ifeq (${IN_USB}, serial)
    UPLOAD_PORT_USBTYPE=USB_SERIAL
    BUILD_USBTYPE=USB_SERIAL
  else ifeq (${IN_USB}, serial2)
    UPLOAD_PORT_USBTYPE=USB_DUAL_SERIAL
    BUILD_USBTYPE=USB_DUAL_SERIAL
  else ifeq (${IN_USB}, serial3)
    UPLOAD_PORT_USBTYPE=USB_TRIPLE_SERIAL
    BUILD_USBTYPE=USB_TRIPLE_SERIAL
  else ifeq (${IN_USB}, keyboard)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_KEYBOARDONLY
    BUILD_USBTYPE=USB_KEYBOARDONLY
  else ifeq (${IN_USB}, touch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_TOUCHSCREEN
    BUILD_USBTYPE=USB_TOUCHSCREEN
  else ifeq (${IN_USB}, hidtouch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID_TOUCHSCREEN
    BUILD_USBTYPE=USB_HID_TOUCHSCREEN
  else ifeq (${IN_USB}, hid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID
    BUILD_USBTYPE=USB_HID
  else ifeq (${IN_USB}, serialhid)
    UPLOAD_PORT_USBTYPE=USB_SERIAL_HID
    BUILD_USBTYPE=USB_SERIAL_HID
  else ifeq (${IN_USB}, midi)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI
    BUILD_USBTYPE=USB_MIDI
  else ifeq (${IN_USB}, midi4)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI4
    BUILD_USBTYPE=USB_MIDI4
  else ifeq (${IN_USB}, midi16)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI16
    BUILD_USBTYPE=USB_MIDI16
  else ifeq (${IN_USB}, serialmidi)
    UPLOAD_PORT_USBTYPE=USB_MIDI_SERIAL
    BUILD_USBTYPE=USB_MIDI_SERIAL
  else ifeq (${IN_USB}, serialmidi4)
    UPLOAD_PORT_USBTYPE=USB_MIDI4_SERIAL
    BUILD_USBTYPE=USB_MIDI4_SERIAL
  else ifeq (${IN_USB}, serialmidi16)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_SERIAL
    BUILD_USBTYPE=USB_MIDI16_SERIAL
  else ifeq (${IN_USB}, audio)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_AUDIO
    BUILD_USBTYPE=USB_AUDIO
  else ifeq (${IN_USB}, serialmidiaudio)
    UPLOAD_PORT_USBTYPE=USB_MIDI_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI_AUDIO_SERIAL
  else ifeq (${IN_USB}, serialmidi16audio)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI16_AUDIO_SERIAL
  else ifeq (${IN_USB}, mtp)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MTPDISK
    BUILD_USBTYPE=USB_MTPDISK
  else ifeq (${IN_USB}, serialmtp)
    UPLOAD_PORT_USBTYPE=USB_MTPDISK_SERIAL
    BUILD_USBTYPE=USB_MTPDISK_SERIAL
  else ifeq (${IN_USB}, rawhid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_RAWHID
    BUILD_USBTYPE=USB_RAWHID
  else ifeq (${IN_USB}, flightsim)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM
    BUILD_USBTYPE=USB_FLIGHTSIM
  else ifeq (${IN_USB}, flightsimjoystick)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM_JOYSTICK
    BUILD_USBTYPE=USB_FLIGHTSIM_JOYSTICK
  else ifeq (${IN_USB}, everything)
    UPLOAD_PORT_USBTYPE=USB_EVERYTHING
    BUILD_USBTYPE=USB_EVERYTHING
  else ifeq (${IN_USB}, disable)
    BUILD_USBTYPE=USB_DISABLED
  endif
  ifeq (${IN_SPEED}, 180)
    BUILD_FCPU=180000000
  else ifeq (${IN_SPEED}, 168)
    BUILD_FCPU=168000000
  else ifeq (${IN_SPEED}, 144)
    BUILD_FCPU=144000000
  else ifeq (${IN_SPEED}, 120)
    BUILD_FCPU=120000000
  else ifeq (${IN_SPEED}, 96)
    BUILD_FCPU=96000000
  else ifeq (${IN_SPEED}, 72)
    BUILD_FCPU=72000000
  else ifeq (${IN_SPEED}, 48)
    BUILD_FCPU=48000000
  else ifeq (${IN_SPEED}, 24)
    BUILD_FCPU=24000000
  else ifeq (${IN_SPEED}, 16)
    BUILD_FCPU=16000000
  else ifeq (${IN_SPEED}, 8)
    BUILD_FCPU=8000000
  else ifeq (${IN_SPEED}, 4)
    BUILD_FCPU=4000000
  else ifeq (${IN_SPEED}, 2)
    BUILD_FCPU=2000000
  else ifeq (${IN_SPEED}, 192)
    BUILD_FCPU=192000000
  else ifeq (${IN_SPEED}, 216)
    BUILD_FCPU=216000000
  else ifeq (${IN_SPEED}, 240)
    BUILD_FCPU=240000000
  else ifeq (${IN_SPEED}, 256)
    BUILD_FCPU=256000000
  endif
  ifeq (${IN_OPT}, o2std)
    BUILD_FLAGS_OPTIMIZE=-O2
  else ifeq (${IN_OPT}, o2lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O2 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o1std)
    BUILD_FLAGS_OPTIMIZE=-O1
  else ifeq (${IN_OPT}, o1lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O1 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o3std)
    BUILD_FLAGS_OPTIMIZE=-O3
  else ifeq (${IN_OPT}, o3purestd)
    BUILD_FLAGS_OPTIMIZE=-O3 -mpure-code -D__PURE_CODE__
  else ifeq (${IN_OPT}, o3lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O3 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o3purelto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O3 -mpure-code -D__PURE_CODE__ -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, ogstd)
    BUILD_FLAGS_OPTIMIZE=-Og
  else ifeq (${IN_OPT}, oglto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-Og -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, osstd)
    BUILD_FLAGS_OPTIMIZE=-Os --specs=nano.specs
  else ifeq (${IN_OPT}, oslto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-Os -flto -fno-fat-lto-objects --specs=nano.specs
  endif
  ifeq (${IN_KEYS}, en-us)
    BUILD_KEYLAYOUT=US_ENGLISH
  else ifeq (${IN_KEYS}, fr-ca)
    BUILD_KEYLAYOUT=CANADIAN_FRENCH
  else ifeq (${IN_KEYS}, xx-ca)
    BUILD_KEYLAYOUT=CANADIAN_MULTILINGUAL
  else ifeq (${IN_KEYS}, cz-cz)
    BUILD_KEYLAYOUT=CZECH
  else ifeq (${IN_KEYS}, da-da)
    BUILD_KEYLAYOUT=DANISH
  else ifeq (${IN_KEYS}, fi-fi)
    BUILD_KEYLAYOUT=FINNISH
  else ifeq (${IN_KEYS}, fr-fr)
    BUILD_KEYLAYOUT=FRENCH
  else ifeq (${IN_KEYS}, fr-be)
    BUILD_KEYLAYOUT=FRENCH_BELGIAN
  else ifeq (${IN_KEYS}, fr-ch)
    BUILD_KEYLAYOUT=FRENCH_SWISS
  else ifeq (${IN_KEYS}, de-de)
    BUILD_KEYLAYOUT=GERMAN
  else ifeq (${IN_KEYS}, de-dm)
    BUILD_KEYLAYOUT=GERMAN_MAC
  else ifeq (${IN_KEYS}, de-ch)
    BUILD_KEYLAYOUT=GERMAN_SWISS
  else ifeq (${IN_KEYS}, is-is)
    BUILD_KEYLAYOUT=ICELANDIC
  else ifeq (${IN_KEYS}, en-ie)
    BUILD_KEYLAYOUT=IRISH
  else ifeq (${IN_KEYS}, it-it)
    BUILD_KEYLAYOUT=ITALIAN
  else ifeq (${IN_KEYS}, no-no)
    BUILD_KEYLAYOUT=NORWEGIAN
  else ifeq (${IN_KEYS}, pt-pt)
    BUILD_KEYLAYOUT=PORTUGUESE
  else ifeq (${IN_KEYS}, pt-br)
    BUILD_KEYLAYOUT=PORTUGUESE_BRAZILIAN
  else ifeq (${IN_KEYS}, rs-rs)
    BUILD_KEYLAYOUT=SERBIAN_LATIN_ONLY
  else ifeq (${IN_KEYS}, es-es)
    BUILD_KEYLAYOUT=SPANISH
  else ifeq (${IN_KEYS}, es-mx)
    BUILD_KEYLAYOUT=SPANISH_LATIN_AMERICA
  else ifeq (${IN_KEYS}, sv-se)
    BUILD_KEYLAYOUT=SWEDISH
  else ifeq (${IN_KEYS}, tr-tr)
    BUILD_KEYLAYOUT=TURKISH
  else ifeq (${IN_KEYS}, en-gb)
    BUILD_KEYLAYOUT=UNITED_KINGDOM
  else ifeq (${IN_KEYS}, usint)
    BUILD_KEYLAYOUT=US_INTERNATIONAL
  endif
else ifeq (${BOARD_NAME}, teensy35)
  SERIAL_RESTART_CMD=false
  BUILD_FLAGS_LIBS=-larm_cortexM4lf_math -lm -lstdc++
  BUILD_FLAGS_S=-x assembler-with-cpp
  BUILD_FLAGS_CPP=-fno-exceptions -fpermissive -felide-constructors -std=gnu++14 -Wno-error=narrowing -fno-rtti
  BUILD_FLAGS_DEFS=-D__MK64FX512__ -DTEENSYDUINO=157
  BUILD_FLAGS_CPU=-mthumb -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fsingle-precision-constant
  BUILD_FLAGS_OPTIMIZE=-Os
  BUILD_FLAGS_DEP=-MMD
  BUILD_FLAGS_COMMON=-g -Wall -ffunction-sections -fdata-sections -nostdlib -mno-unaligned-access
  BUILD_COMMAND_SIZE=arm-none-eabi-size
  BUILD_COMMAND_LINKER=arm-none-eabi-gcc
  BUILD_COMMAND_OBJDUMP=arm-none-eabi-objdump
  BUILD_COMMAND_OBJCOPY=arm-none-eabi-objcopy
  BUILD_COMMAND_AR=arm-none-eabi-gcc-ar
  BUILD_COMMAND_G__=arm-none-eabi-g++
  BUILD_COMMAND_GCC=arm-none-eabi-gcc
  BUILD_TOOLCHAIN=arm/bin/
  BUILD_WARN_DATA_PERCENTAGE=98
  BUILD_MCU=mk64fx512
  BUILD_CORE=teensy3
  BUILD_BOARD=TEENSY35
  UPLOAD_PORT_MODELID=0x1F
  UPLOAD_PROTOCOL=teensy
  UPLOAD_TOOL=teensyloader
  UPLOAD_TOOL_TEENSY=teensyloader
  UPLOAD_TOOL_DEFAULT=teensyloader
  UPLOAD_MAXIMUM_DATA_SIZE=262136
  UPLOAD_MAXIMUM_SIZE=524288
  NAME=Teensy 3.5
  ifeq (${IN_USB}, serial)
    UPLOAD_PORT_USBTYPE=USB_SERIAL
    BUILD_USBTYPE=USB_SERIAL
  else ifeq (${IN_USB}, serial2)
    UPLOAD_PORT_USBTYPE=USB_DUAL_SERIAL
    BUILD_USBTYPE=USB_DUAL_SERIAL
  else ifeq (${IN_USB}, serial3)
    UPLOAD_PORT_USBTYPE=USB_TRIPLE_SERIAL
    BUILD_USBTYPE=USB_TRIPLE_SERIAL
  else ifeq (${IN_USB}, keyboard)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_KEYBOARDONLY
    BUILD_USBTYPE=USB_KEYBOARDONLY
  else ifeq (${IN_USB}, touch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_TOUCHSCREEN
    BUILD_USBTYPE=USB_TOUCHSCREEN
  else ifeq (${IN_USB}, hidtouch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID_TOUCHSCREEN
    BUILD_USBTYPE=USB_HID_TOUCHSCREEN
  else ifeq (${IN_USB}, hid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID
    BUILD_USBTYPE=USB_HID
  else ifeq (${IN_USB}, serialhid)
    UPLOAD_PORT_USBTYPE=USB_SERIAL_HID
    BUILD_USBTYPE=USB_SERIAL_HID
  else ifeq (${IN_USB}, midi)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI
    BUILD_USBTYPE=USB_MIDI
  else ifeq (${IN_USB}, midi4)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI4
    BUILD_USBTYPE=USB_MIDI4
  else ifeq (${IN_USB}, midi16)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI16
    BUILD_USBTYPE=USB_MIDI16
  else ifeq (${IN_USB}, serialmidi)
    UPLOAD_PORT_USBTYPE=USB_MIDI_SERIAL
    BUILD_USBTYPE=USB_MIDI_SERIAL
  else ifeq (${IN_USB}, serialmidi4)
    UPLOAD_PORT_USBTYPE=USB_MIDI4_SERIAL
    BUILD_USBTYPE=USB_MIDI4_SERIAL
  else ifeq (${IN_USB}, serialmidi16)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_SERIAL
    BUILD_USBTYPE=USB_MIDI16_SERIAL
  else ifeq (${IN_USB}, audio)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_AUDIO
    BUILD_USBTYPE=USB_AUDIO
  else ifeq (${IN_USB}, serialmidiaudio)
    UPLOAD_PORT_USBTYPE=USB_MIDI_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI_AUDIO_SERIAL
  else ifeq (${IN_USB}, serialmidi16audio)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI16_AUDIO_SERIAL
  else ifeq (${IN_USB}, mtp)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MTPDISK
    BUILD_USBTYPE=USB_MTPDISK
  else ifeq (${IN_USB}, serialmtp)
    UPLOAD_PORT_USBTYPE=USB_MTPDISK_SERIAL
    BUILD_USBTYPE=USB_MTPDISK_SERIAL
  else ifeq (${IN_USB}, rawhid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_RAWHID
    BUILD_USBTYPE=USB_RAWHID
  else ifeq (${IN_USB}, flightsim)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM
    BUILD_USBTYPE=USB_FLIGHTSIM
  else ifeq (${IN_USB}, flightsimjoystick)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM_JOYSTICK
    BUILD_USBTYPE=USB_FLIGHTSIM_JOYSTICK
  else ifeq (${IN_USB}, everything)
    UPLOAD_PORT_USBTYPE=USB_EVERYTHING
    BUILD_USBTYPE=USB_EVERYTHING
  else ifeq (${IN_USB}, disable)
    BUILD_USBTYPE=USB_DISABLED
  endif
  ifeq (${IN_SPEED}, 120)
    BUILD_FCPU=120000000
  else ifeq (${IN_SPEED}, 96)
    BUILD_FCPU=96000000
  else ifeq (${IN_SPEED}, 72)
    BUILD_FCPU=72000000
  else ifeq (${IN_SPEED}, 48)
    BUILD_FCPU=48000000
  else ifeq (${IN_SPEED}, 24)
    BUILD_FCPU=24000000
  else ifeq (${IN_SPEED}, 16)
    BUILD_FCPU=16000000
  else ifeq (${IN_SPEED}, 8)
    BUILD_FCPU=8000000
  else ifeq (${IN_SPEED}, 4)
    BUILD_FCPU=4000000
  else ifeq (${IN_SPEED}, 2)
    BUILD_FCPU=2000000
  else ifeq (${IN_SPEED}, 144)
    BUILD_FCPU=144000000
  else ifeq (${IN_SPEED}, 168)
    BUILD_FCPU=168000000
  endif
  ifeq (${IN_OPT}, o2std)
    BUILD_FLAGS_OPTIMIZE=-O2
  else ifeq (${IN_OPT}, o2lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O2 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o1std)
    BUILD_FLAGS_OPTIMIZE=-O1
  else ifeq (${IN_OPT}, o1lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O1 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o3std)
    BUILD_FLAGS_OPTIMIZE=-O3
  else ifeq (${IN_OPT}, o3purestd)
    BUILD_FLAGS_OPTIMIZE=-O3 -mpure-code -D__PURE_CODE__
  else ifeq (${IN_OPT}, o3lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O3 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o3purelto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O3 -mpure-code -D__PURE_CODE__ -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, ogstd)
    BUILD_FLAGS_OPTIMIZE=-Og
  else ifeq (${IN_OPT}, oglto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-Og -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, osstd)
    BUILD_FLAGS_OPTIMIZE=-Os --specs=nano.specs
  else ifeq (${IN_OPT}, oslto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-Os -flto -fno-fat-lto-objects --specs=nano.specs
  endif
  ifeq (${IN_KEYS}, en-us)
    BUILD_KEYLAYOUT=US_ENGLISH
  else ifeq (${IN_KEYS}, fr-ca)
    BUILD_KEYLAYOUT=CANADIAN_FRENCH
  else ifeq (${IN_KEYS}, xx-ca)
    BUILD_KEYLAYOUT=CANADIAN_MULTILINGUAL
  else ifeq (${IN_KEYS}, cz-cz)
    BUILD_KEYLAYOUT=CZECH
  else ifeq (${IN_KEYS}, da-da)
    BUILD_KEYLAYOUT=DANISH
  else ifeq (${IN_KEYS}, fi-fi)
    BUILD_KEYLAYOUT=FINNISH
  else ifeq (${IN_KEYS}, fr-fr)
    BUILD_KEYLAYOUT=FRENCH
  else ifeq (${IN_KEYS}, fr-be)
    BUILD_KEYLAYOUT=FRENCH_BELGIAN
  else ifeq (${IN_KEYS}, fr-ch)
    BUILD_KEYLAYOUT=FRENCH_SWISS
  else ifeq (${IN_KEYS}, de-de)
    BUILD_KEYLAYOUT=GERMAN
  else ifeq (${IN_KEYS}, de-dm)
    BUILD_KEYLAYOUT=GERMAN_MAC
  else ifeq (${IN_KEYS}, de-ch)
    BUILD_KEYLAYOUT=GERMAN_SWISS
  else ifeq (${IN_KEYS}, is-is)
    BUILD_KEYLAYOUT=ICELANDIC
  else ifeq (${IN_KEYS}, en-ie)
    BUILD_KEYLAYOUT=IRISH
  else ifeq (${IN_KEYS}, it-it)
    BUILD_KEYLAYOUT=ITALIAN
  else ifeq (${IN_KEYS}, no-no)
    BUILD_KEYLAYOUT=NORWEGIAN
  else ifeq (${IN_KEYS}, pt-pt)
    BUILD_KEYLAYOUT=PORTUGUESE
  else ifeq (${IN_KEYS}, pt-br)
    BUILD_KEYLAYOUT=PORTUGUESE_BRAZILIAN
  else ifeq (${IN_KEYS}, rs-rs)
    BUILD_KEYLAYOUT=SERBIAN_LATIN_ONLY
  else ifeq (${IN_KEYS}, es-es)
    BUILD_KEYLAYOUT=SPANISH
  else ifeq (${IN_KEYS}, es-mx)
    BUILD_KEYLAYOUT=SPANISH_LATIN_AMERICA
  else ifeq (${IN_KEYS}, sv-se)
    BUILD_KEYLAYOUT=SWEDISH
  else ifeq (${IN_KEYS}, tr-tr)
    BUILD_KEYLAYOUT=TURKISH
  else ifeq (${IN_KEYS}, en-gb)
    BUILD_KEYLAYOUT=UNITED_KINGDOM
  else ifeq (${IN_KEYS}, usint)
    BUILD_KEYLAYOUT=US_INTERNATIONAL
  endif
else ifeq (${BOARD_NAME}, teensy31)
  PID_4=0x0476
  PID_3=0x048A
  PID_2=0x0489
  PID_1=0x0487
  PID_0=0x0483
  VID_4=0x16C0
  VID_3=0x16C0
  VID_2=0x16C0
  VID_1=0x16C0
  VID_0=0x16C0
  SERIAL_RESTART_CMD=false
  BUILD_FLAGS_LIBS=-larm_cortexM4l_math -lm -lstdc++
  BUILD_FLAGS_S=-x assembler-with-cpp
  BUILD_FLAGS_CPP=-fno-exceptions -fpermissive -felide-constructors -std=gnu++14 -Wno-error=narrowing -fno-rtti
  BUILD_FLAGS_DEFS=-D__MK20DX256__ -DTEENSYDUINO=157
  BUILD_FLAGS_CPU=-mthumb -mcpu=cortex-m4 -fsingle-precision-constant
  BUILD_FLAGS_OPTIMIZE=-Os
  BUILD_FLAGS_DEP=-MMD
  BUILD_FLAGS_COMMON=-g -Wall -ffunction-sections -fdata-sections -nostdlib -mno-unaligned-access
  BUILD_COMMAND_SIZE=arm-none-eabi-size
  BUILD_COMMAND_LINKER=arm-none-eabi-gcc
  BUILD_COMMAND_OBJDUMP=arm-none-eabi-objdump
  BUILD_COMMAND_OBJCOPY=arm-none-eabi-objcopy
  BUILD_COMMAND_AR=arm-none-eabi-gcc-ar
  BUILD_COMMAND_G__=arm-none-eabi-g++
  BUILD_COMMAND_GCC=arm-none-eabi-gcc
  BUILD_TOOLCHAIN=arm/bin/
  BUILD_WARN_DATA_PERCENTAGE=97
  BUILD_MCU=mk20dx256
  BUILD_CORE=teensy3
  BUILD_BOARD=TEENSY32
  UPLOAD_PORT_1_MODELID=0x1E
  UPLOAD_PORT_0_MODELID=0x21
  UPLOAD_PROTOCOL=teensy
  UPLOAD_TOOL=teensyloader
  UPLOAD_TOOL_TEENSY=teensyloader
  UPLOAD_TOOL_DEFAULT=teensyloader
  UPLOAD_MAXIMUM_DATA_SIZE=65536
  UPLOAD_MAXIMUM_SIZE=262144
  NAME=Teensy 3.2 / 3.1
  ifeq (${IN_USB}, serial)
    UPLOAD_PORT_USBTYPE=USB_SERIAL
    BUILD_USBTYPE=USB_SERIAL
  else ifeq (${IN_USB}, serial2)
    UPLOAD_PORT_USBTYPE=USB_DUAL_SERIAL
    BUILD_USBTYPE=USB_DUAL_SERIAL
  else ifeq (${IN_USB}, serial3)
    UPLOAD_PORT_USBTYPE=USB_TRIPLE_SERIAL
    BUILD_USBTYPE=USB_TRIPLE_SERIAL
  else ifeq (${IN_USB}, keyboard)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_KEYBOARDONLY
    BUILD_USBTYPE=USB_KEYBOARDONLY
  else ifeq (${IN_USB}, touch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_TOUCHSCREEN
    BUILD_USBTYPE=USB_TOUCHSCREEN
  else ifeq (${IN_USB}, hidtouch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID_TOUCHSCREEN
    BUILD_USBTYPE=USB_HID_TOUCHSCREEN
  else ifeq (${IN_USB}, hid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID
    BUILD_USBTYPE=USB_HID
  else ifeq (${IN_USB}, serialhid)
    UPLOAD_PORT_USBTYPE=USB_SERIAL_HID
    BUILD_USBTYPE=USB_SERIAL_HID
  else ifeq (${IN_USB}, midi)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI
    BUILD_USBTYPE=USB_MIDI
  else ifeq (${IN_USB}, midi4)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI4
    BUILD_USBTYPE=USB_MIDI4
  else ifeq (${IN_USB}, midi16)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI16
    BUILD_USBTYPE=USB_MIDI16
  else ifeq (${IN_USB}, serialmidi)
    UPLOAD_PORT_USBTYPE=USB_MIDI_SERIAL
    BUILD_USBTYPE=USB_MIDI_SERIAL
  else ifeq (${IN_USB}, serialmidi4)
    UPLOAD_PORT_USBTYPE=USB_MIDI4_SERIAL
    BUILD_USBTYPE=USB_MIDI4_SERIAL
  else ifeq (${IN_USB}, serialmidi16)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_SERIAL
    BUILD_USBTYPE=USB_MIDI16_SERIAL
  else ifeq (${IN_USB}, audio)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_AUDIO
    BUILD_USBTYPE=USB_AUDIO
  else ifeq (${IN_USB}, serialmidiaudio)
    UPLOAD_PORT_USBTYPE=USB_MIDI_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI_AUDIO_SERIAL
  else ifeq (${IN_USB}, serialmidi16audio)
    UPLOAD_PORT_USBTYPE=USB_MIDI16_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI16_AUDIO_SERIAL
  else ifeq (${IN_USB}, mtp)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MTPDISK
    BUILD_USBTYPE=USB_MTPDISK
  else ifeq (${IN_USB}, serialmtp)
    UPLOAD_PORT_USBTYPE=USB_MTPDISK_SERIAL
    BUILD_USBTYPE=USB_MTPDISK_SERIAL
  else ifeq (${IN_USB}, rawhid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_RAWHID
    BUILD_USBTYPE=USB_RAWHID
  else ifeq (${IN_USB}, flightsim)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM
    BUILD_USBTYPE=USB_FLIGHTSIM
  else ifeq (${IN_USB}, flightsimjoystick)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM_JOYSTICK
    BUILD_USBTYPE=USB_FLIGHTSIM_JOYSTICK
  else ifeq (${IN_USB}, everything)
    UPLOAD_PORT_USBTYPE=USB_EVERYTHING
    BUILD_USBTYPE=USB_EVERYTHING
  else ifeq (${IN_USB}, disable)
    BUILD_USBTYPE=USB_DISABLED
  endif
  ifeq (${IN_SPEED}, 96)
    BUILD_FCPU=96000000
  else ifeq (${IN_SPEED}, 72)
    BUILD_FCPU=72000000
  else ifeq (${IN_SPEED}, 48)
    BUILD_FCPU=48000000
  else ifeq (${IN_SPEED}, 24)
    BUILD_FCPU=24000000
  else ifeq (${IN_SPEED}, 16)
    BUILD_FCPU=16000000
  else ifeq (${IN_SPEED}, 8)
    BUILD_FCPU=8000000
  else ifeq (${IN_SPEED}, 4)
    BUILD_FCPU=4000000
  else ifeq (${IN_SPEED}, 2)
    BUILD_FCPU=2000000
  else ifeq (${IN_SPEED}, 120)
    BUILD_FCPU=120000000
  else ifeq (${IN_SPEED}, 168)
    BUILD_FCPU=168000000
  else ifeq (${IN_SPEED}, 144)
    BUILD_FCPU=144000000
  endif
  ifeq (${IN_OPT}, o2std)
    BUILD_FLAGS_OPTIMIZE=-O2
  else ifeq (${IN_OPT}, o2lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O2 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o1std)
    BUILD_FLAGS_OPTIMIZE=-O1
  else ifeq (${IN_OPT}, o1lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O1 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o3std)
    BUILD_FLAGS_OPTIMIZE=-O3
  else ifeq (${IN_OPT}, o3purestd)
    BUILD_FLAGS_OPTIMIZE=-O3 -mpure-code -D__PURE_CODE__
  else ifeq (${IN_OPT}, o3lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O3 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o3purelto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O3 -mpure-code -D__PURE_CODE__ -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, ogstd)
    BUILD_FLAGS_OPTIMIZE=-Og
  else ifeq (${IN_OPT}, oglto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-Og -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, osstd)
    BUILD_FLAGS_OPTIMIZE=-Os --specs=nano.specs
  else ifeq (${IN_OPT}, oslto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-Os -flto -fno-fat-lto-objects --specs=nano.specs
  endif
  ifeq (${IN_KEYS}, en-us)
    BUILD_KEYLAYOUT=US_ENGLISH
  else ifeq (${IN_KEYS}, fr-ca)
    BUILD_KEYLAYOUT=CANADIAN_FRENCH
  else ifeq (${IN_KEYS}, xx-ca)
    BUILD_KEYLAYOUT=CANADIAN_MULTILINGUAL
  else ifeq (${IN_KEYS}, cz-cz)
    BUILD_KEYLAYOUT=CZECH
  else ifeq (${IN_KEYS}, da-da)
    BUILD_KEYLAYOUT=DANISH
  else ifeq (${IN_KEYS}, fi-fi)
    BUILD_KEYLAYOUT=FINNISH
  else ifeq (${IN_KEYS}, fr-fr)
    BUILD_KEYLAYOUT=FRENCH
  else ifeq (${IN_KEYS}, fr-be)
    BUILD_KEYLAYOUT=FRENCH_BELGIAN
  else ifeq (${IN_KEYS}, fr-ch)
    BUILD_KEYLAYOUT=FRENCH_SWISS
  else ifeq (${IN_KEYS}, de-de)
    BUILD_KEYLAYOUT=GERMAN
  else ifeq (${IN_KEYS}, de-dm)
    BUILD_KEYLAYOUT=GERMAN_MAC
  else ifeq (${IN_KEYS}, de-ch)
    BUILD_KEYLAYOUT=GERMAN_SWISS
  else ifeq (${IN_KEYS}, is-is)
    BUILD_KEYLAYOUT=ICELANDIC
  else ifeq (${IN_KEYS}, en-ie)
    BUILD_KEYLAYOUT=IRISH
  else ifeq (${IN_KEYS}, it-it)
    BUILD_KEYLAYOUT=ITALIAN
  else ifeq (${IN_KEYS}, no-no)
    BUILD_KEYLAYOUT=NORWEGIAN
  else ifeq (${IN_KEYS}, pt-pt)
    BUILD_KEYLAYOUT=PORTUGUESE
  else ifeq (${IN_KEYS}, pt-br)
    BUILD_KEYLAYOUT=PORTUGUESE_BRAZILIAN
  else ifeq (${IN_KEYS}, rs-rs)
    BUILD_KEYLAYOUT=SERBIAN_LATIN_ONLY
  else ifeq (${IN_KEYS}, es-es)
    BUILD_KEYLAYOUT=SPANISH
  else ifeq (${IN_KEYS}, es-mx)
    BUILD_KEYLAYOUT=SPANISH_LATIN_AMERICA
  else ifeq (${IN_KEYS}, sv-se)
    BUILD_KEYLAYOUT=SWEDISH
  else ifeq (${IN_KEYS}, tr-tr)
    BUILD_KEYLAYOUT=TURKISH
  else ifeq (${IN_KEYS}, en-gb)
    BUILD_KEYLAYOUT=UNITED_KINGDOM
  else ifeq (${IN_KEYS}, usint)
    BUILD_KEYLAYOUT=US_INTERNATIONAL
  endif
else ifeq (${BOARD_NAME}, teensy30)
  SERIAL_RESTART_CMD=false
  BUILD_FLAGS_LIBS=-larm_cortexM4l_math -lm -lstdc++
  BUILD_FLAGS_LDSPECS=--specs=nano.specs
  BUILD_FLAGS_S=-x assembler-with-cpp
  BUILD_FLAGS_CPP=-fno-exceptions -fpermissive -felide-constructors -std=gnu++14 -Wno-error=narrowing -fno-rtti
  BUILD_FLAGS_DEFS=-D__MK20DX128__ -DTEENSYDUINO=157
  BUILD_FLAGS_CPU=-mthumb -mcpu=cortex-m4 -fsingle-precision-constant
  BUILD_FLAGS_OPTIMIZE=-Os
  BUILD_FLAGS_DEP=-MMD
  BUILD_FLAGS_COMMON=-g -Wall -ffunction-sections -fdata-sections -nostdlib -mno-unaligned-access
  BUILD_COMMAND_SIZE=arm-none-eabi-size
  BUILD_COMMAND_LINKER=arm-none-eabi-gcc
  BUILD_COMMAND_OBJDUMP=arm-none-eabi-objdump
  BUILD_COMMAND_OBJCOPY=arm-none-eabi-objcopy
  BUILD_COMMAND_AR=arm-none-eabi-gcc-ar
  BUILD_COMMAND_G__=arm-none-eabi-g++
  BUILD_COMMAND_GCC=arm-none-eabi-gcc
  BUILD_TOOLCHAIN=arm/bin/
  BUILD_WARN_DATA_PERCENTAGE=94
  BUILD_MCU=mk20dx128
  BUILD_CORE=teensy3
  BUILD_BOARD=TEENSY30
  UPLOAD_PORT_MODELID=0x1D
  UPLOAD_PROTOCOL=teensy
  UPLOAD_TOOL=teensyloader
  UPLOAD_TOOL_TEENSY=teensyloader
  UPLOAD_TOOL_DEFAULT=teensyloader
  UPLOAD_MAXIMUM_DATA_SIZE=16384
  UPLOAD_MAXIMUM_SIZE=131072
  NAME=Teensy 3.0
  ifeq (${IN_USB}, serial)
    UPLOAD_PORT_USBTYPE=USB_SERIAL
    BUILD_USBTYPE=USB_SERIAL
  else ifeq (${IN_USB}, keyboard)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_KEYBOARDONLY
    BUILD_USBTYPE=USB_KEYBOARDONLY
  else ifeq (${IN_USB}, hid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID
    BUILD_USBTYPE=USB_HID
  else ifeq (${IN_USB}, serialhid)
    UPLOAD_PORT_USBTYPE=USB_SERIAL_HID
    BUILD_USBTYPE=USB_SERIAL_HID
  else ifeq (${IN_USB}, touch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_TOUCHSCREEN
    BUILD_USBTYPE=USB_TOUCHSCREEN
  else ifeq (${IN_USB}, midi)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI
    BUILD_USBTYPE=USB_MIDI
  else ifeq (${IN_USB}, midi4)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI4
    BUILD_USBTYPE=USB_MIDI4
  else ifeq (${IN_USB}, serialmidi)
    UPLOAD_PORT_USBTYPE=USB_MIDI_SERIAL
    BUILD_USBTYPE=USB_MIDI_SERIAL
  else ifeq (${IN_USB}, serialmidi4)
    UPLOAD_PORT_USBTYPE=USB_MIDI4_SERIAL
    BUILD_USBTYPE=USB_MIDI4_SERIAL
  else ifeq (${IN_USB}, audio)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_AUDIO
    BUILD_USBTYPE=USB_AUDIO
  else ifeq (${IN_USB}, serialmidiaudio)
    UPLOAD_PORT_USBTYPE=USB_MIDI_AUDIO_SERIAL
    BUILD_USBTYPE=USB_MIDI_AUDIO_SERIAL
  else ifeq (${IN_USB}, mtp)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MTPDISK
    BUILD_USBTYPE=USB_MTPDISK
  else ifeq (${IN_USB}, rawhid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_RAWHID
    BUILD_USBTYPE=USB_RAWHID
  else ifeq (${IN_USB}, flightsim)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM
    BUILD_USBTYPE=USB_FLIGHTSIM
  else ifeq (${IN_USB}, disable)
    BUILD_USBTYPE=USB_DISABLED
  endif
  ifeq (${IN_SPEED}, 96)
    BUILD_FCPU=96000000
  else ifeq (${IN_SPEED}, 48)
    BUILD_FCPU=48000000
  else ifeq (${IN_SPEED}, 24)
    BUILD_FCPU=24000000
  endif
  ifeq (${IN_OPT}, o2std)
    BUILD_FLAGS_OPTIMIZE=-O2
  else ifeq (${IN_OPT}, o2lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O2 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o1std)
    BUILD_FLAGS_OPTIMIZE=-O1
  else ifeq (${IN_OPT}, o1lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O1 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o3std)
    BUILD_FLAGS_OPTIMIZE=-O3
  else ifeq (${IN_OPT}, o3lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O3 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, ogstd)
    BUILD_FLAGS_OPTIMIZE=-Og
  else ifeq (${IN_OPT}, oglto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-Og -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, osstd)
    BUILD_FLAGS_OPTIMIZE=-Os --specs=nano.specs
  else ifeq (${IN_OPT}, oslto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-Os -flto -fno-fat-lto-objects --specs=nano.specs
  endif
  ifeq (${IN_KEYS}, en-us)
    BUILD_KEYLAYOUT=US_ENGLISH
  else ifeq (${IN_KEYS}, fr-ca)
    BUILD_KEYLAYOUT=CANADIAN_FRENCH
  else ifeq (${IN_KEYS}, xx-ca)
    BUILD_KEYLAYOUT=CANADIAN_MULTILINGUAL
  else ifeq (${IN_KEYS}, cz-cz)
    BUILD_KEYLAYOUT=CZECH
  else ifeq (${IN_KEYS}, da-da)
    BUILD_KEYLAYOUT=DANISH
  else ifeq (${IN_KEYS}, fi-fi)
    BUILD_KEYLAYOUT=FINNISH
  else ifeq (${IN_KEYS}, fr-fr)
    BUILD_KEYLAYOUT=FRENCH
  else ifeq (${IN_KEYS}, fr-be)
    BUILD_KEYLAYOUT=FRENCH_BELGIAN
  else ifeq (${IN_KEYS}, fr-ch)
    BUILD_KEYLAYOUT=FRENCH_SWISS
  else ifeq (${IN_KEYS}, de-de)
    BUILD_KEYLAYOUT=GERMAN
  else ifeq (${IN_KEYS}, de-dm)
    BUILD_KEYLAYOUT=GERMAN_MAC
  else ifeq (${IN_KEYS}, de-ch)
    BUILD_KEYLAYOUT=GERMAN_SWISS
  else ifeq (${IN_KEYS}, is-is)
    BUILD_KEYLAYOUT=ICELANDIC
  else ifeq (${IN_KEYS}, en-ie)
    BUILD_KEYLAYOUT=IRISH
  else ifeq (${IN_KEYS}, it-it)
    BUILD_KEYLAYOUT=ITALIAN
  else ifeq (${IN_KEYS}, no-no)
    BUILD_KEYLAYOUT=NORWEGIAN
  else ifeq (${IN_KEYS}, pt-pt)
    BUILD_KEYLAYOUT=PORTUGUESE
  else ifeq (${IN_KEYS}, pt-br)
    BUILD_KEYLAYOUT=PORTUGUESE_BRAZILIAN
  else ifeq (${IN_KEYS}, rs-rs)
    BUILD_KEYLAYOUT=SERBIAN_LATIN_ONLY
  else ifeq (${IN_KEYS}, es-es)
    BUILD_KEYLAYOUT=SPANISH
  else ifeq (${IN_KEYS}, es-mx)
    BUILD_KEYLAYOUT=SPANISH_LATIN_AMERICA
  else ifeq (${IN_KEYS}, sv-se)
    BUILD_KEYLAYOUT=SWEDISH
  else ifeq (${IN_KEYS}, tr-tr)
    BUILD_KEYLAYOUT=TURKISH
  else ifeq (${IN_KEYS}, en-gb)
    BUILD_KEYLAYOUT=UNITED_KINGDOM
  else ifeq (${IN_KEYS}, usint)
    BUILD_KEYLAYOUT=US_INTERNATIONAL
  endif
else ifeq (${BOARD_NAME}, teensyLC)
  SERIAL_RESTART_CMD=false
  BUILD_FLAGS_LIBS=-larm_cortexM0l_math -lm -lstdc++
  BUILD_FLAGS_S=-x assembler-with-cpp
  BUILD_FLAGS_CPP=-fno-exceptions -fpermissive -felide-constructors -std=gnu++14 -Wno-error=narrowing -fno-rtti
  BUILD_FLAGS_DEFS=-D__MKL26Z64__ -DTEENSYDUINO=157
  BUILD_FLAGS_CPU=-mthumb -mcpu=cortex-m0plus -fsingle-precision-constant
  BUILD_FLAGS_DEP=-MMD
  BUILD_FLAGS_COMMON=-g -Wall -ffunction-sections -fdata-sections -nostdlib -mno-unaligned-access
  BUILD_COMMAND_SIZE=arm-none-eabi-size
  BUILD_COMMAND_LINKER=arm-none-eabi-gcc
  BUILD_COMMAND_OBJDUMP=arm-none-eabi-objdump
  BUILD_COMMAND_OBJCOPY=arm-none-eabi-objcopy
  BUILD_COMMAND_AR=arm-none-eabi-gcc-ar
  BUILD_COMMAND_G__=arm-none-eabi-g++
  BUILD_COMMAND_GCC=arm-none-eabi-gcc
  BUILD_TOOLCHAIN=arm/bin/
  BUILD_WARN_DATA_PERCENTAGE=88
  BUILD_MCU=mkl26z64
  BUILD_CORE=teensy3
  BUILD_BOARD=TEENSYLC
  UPLOAD_PORT_MODELID=0x20
  UPLOAD_PROTOCOL=teensy
  UPLOAD_TOOL=teensyloader
  UPLOAD_TOOL_TEENSY=teensyloader
  UPLOAD_TOOL_DEFAULT=teensyloader
  UPLOAD_MAXIMUM_DATA_SIZE=8192
  UPLOAD_MAXIMUM_SIZE=63488
  NAME=Teensy LC
  ifeq (${IN_USB}, serial)
    UPLOAD_PORT_USBTYPE=USB_SERIAL
    BUILD_USBTYPE=USB_SERIAL
  else ifeq (${IN_USB}, serial2)
    UPLOAD_PORT_USBTYPE=USB_DUAL_SERIAL
    BUILD_USBTYPE=USB_DUAL_SERIAL
  else ifeq (${IN_USB}, serial3)
    UPLOAD_PORT_USBTYPE=USB_TRIPLE_SERIAL
    BUILD_USBTYPE=USB_TRIPLE_SERIAL
  else ifeq (${IN_USB}, keyboard)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_KEYBOARDONLY
    BUILD_USBTYPE=USB_KEYBOARDONLY
  else ifeq (${IN_USB}, hid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID
    BUILD_USBTYPE=USB_HID
  else ifeq (${IN_USB}, serialhid)
    UPLOAD_PORT_USBTYPE=USB_SERIAL_HID
    BUILD_USBTYPE=USB_SERIAL_HID
  else ifeq (${IN_USB}, touch)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_TOUCHSCREEN
    BUILD_USBTYPE=USB_TOUCHSCREEN
  else ifeq (${IN_USB}, midi)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI
    BUILD_USBTYPE=USB_MIDI
  else ifeq (${IN_USB}, midi4)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI4
    BUILD_USBTYPE=USB_MIDI4
  else ifeq (${IN_USB}, serialmidi)
    UPLOAD_PORT_USBTYPE=USB_MIDI_SERIAL
    BUILD_USBTYPE=USB_MIDI_SERIAL
  else ifeq (${IN_USB}, serialmidi4)
    UPLOAD_PORT_USBTYPE=USB_MIDI4_SERIAL
    BUILD_USBTYPE=USB_MIDI4_SERIAL
  else ifeq (${IN_USB}, mtp)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MTPDISK
    BUILD_USBTYPE=USB_MTPDISK
  else ifeq (${IN_USB}, rawhid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_RAWHID
    BUILD_USBTYPE=USB_RAWHID
  else ifeq (${IN_USB}, flightsim)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM
    BUILD_USBTYPE=USB_FLIGHTSIM
  else ifeq (${IN_USB}, disable)
    BUILD_USBTYPE=USB_DISABLED
  endif
  ifeq (${IN_SPEED}, 48)
    BUILD_FCPU=48000000
  else ifeq (${IN_SPEED}, 24)
    BUILD_FCPU=24000000
  endif
  ifeq (${IN_OPT}, osstd)
    BUILD_FLAGS_OPTIMIZE=-Os --specs=nano.specs
  else ifeq (${IN_OPT}, oslto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-Os -flto -fno-fat-lto-objects --specs=nano.specs
  else ifeq (${IN_OPT}, ogstd)
    BUILD_FLAGS_OPTIMIZE=-Og
  else ifeq (${IN_OPT}, oglto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-Og -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o3std)
    BUILD_FLAGS_OPTIMIZE=-O3
  else ifeq (${IN_OPT}, o3lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O3 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o2std)
    BUILD_FLAGS_OPTIMIZE=-O2
  else ifeq (${IN_OPT}, o2lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O2 -flto -fno-fat-lto-objects
  else ifeq (${IN_OPT}, o1std)
    BUILD_FLAGS_OPTIMIZE=-O1
  else ifeq (${IN_OPT}, o1lto)
    BUILD_FLAGS_LDSPECS=-fuse-linker-plugin
    BUILD_FLAGS_OPTIMIZE=-O1 -flto -fno-fat-lto-objects
  endif
  ifeq (${IN_KEYS}, en-us)
    BUILD_KEYLAYOUT=US_ENGLISH
  else ifeq (${IN_KEYS}, fr-ca)
    BUILD_KEYLAYOUT=CANADIAN_FRENCH
  else ifeq (${IN_KEYS}, xx-ca)
    BUILD_KEYLAYOUT=CANADIAN_MULTILINGUAL
  else ifeq (${IN_KEYS}, cz-cz)
    BUILD_KEYLAYOUT=CZECH
  else ifeq (${IN_KEYS}, da-da)
    BUILD_KEYLAYOUT=DANISH
  else ifeq (${IN_KEYS}, fi-fi)
    BUILD_KEYLAYOUT=FINNISH
  else ifeq (${IN_KEYS}, fr-fr)
    BUILD_KEYLAYOUT=FRENCH
  else ifeq (${IN_KEYS}, fr-be)
    BUILD_KEYLAYOUT=FRENCH_BELGIAN
  else ifeq (${IN_KEYS}, fr-ch)
    BUILD_KEYLAYOUT=FRENCH_SWISS
  else ifeq (${IN_KEYS}, de-de)
    BUILD_KEYLAYOUT=GERMAN
  else ifeq (${IN_KEYS}, de-dm)
    BUILD_KEYLAYOUT=GERMAN_MAC
  else ifeq (${IN_KEYS}, de-ch)
    BUILD_KEYLAYOUT=GERMAN_SWISS
  else ifeq (${IN_KEYS}, is-is)
    BUILD_KEYLAYOUT=ICELANDIC
  else ifeq (${IN_KEYS}, en-ie)
    BUILD_KEYLAYOUT=IRISH
  else ifeq (${IN_KEYS}, it-it)
    BUILD_KEYLAYOUT=ITALIAN
  else ifeq (${IN_KEYS}, no-no)
    BUILD_KEYLAYOUT=NORWEGIAN
  else ifeq (${IN_KEYS}, pt-pt)
    BUILD_KEYLAYOUT=PORTUGUESE
  else ifeq (${IN_KEYS}, pt-br)
    BUILD_KEYLAYOUT=PORTUGUESE_BRAZILIAN
  else ifeq (${IN_KEYS}, rs-rs)
    BUILD_KEYLAYOUT=SERBIAN_LATIN_ONLY
  else ifeq (${IN_KEYS}, es-es)
    BUILD_KEYLAYOUT=SPANISH
  else ifeq (${IN_KEYS}, es-mx)
    BUILD_KEYLAYOUT=SPANISH_LATIN_AMERICA
  else ifeq (${IN_KEYS}, sv-se)
    BUILD_KEYLAYOUT=SWEDISH
  else ifeq (${IN_KEYS}, tr-tr)
    BUILD_KEYLAYOUT=TURKISH
  else ifeq (${IN_KEYS}, en-gb)
    BUILD_KEYLAYOUT=UNITED_KINGDOM
  else ifeq (${IN_KEYS}, usint)
    BUILD_KEYLAYOUT=US_INTERNATIONAL
  endif
else ifeq (${BOARD_NAME}, teensypp2)
  SERIAL_RESTART_CMD=true
  BUILD_SERIAL_NUMBER=true
  BUILD_FLAGS_LIBS=-lm
  BUILD_FLAGS_LD=-Wl,--gc-sections,--relax
  BUILD_FLAGS_S=-x assembler-with-cpp
  BUILD_FLAGS_CPP=-fno-exceptions -fpermissive -felide-constructors -std=gnu++11
  BUILD_FLAGS_DEFS=-DTEENSYDUINO=157 -DARDUINO_ARCH_AVR
  BUILD_FLAGS_CPU=-mmcu=at90usb1286
  BUILD_FLAGS_OPTIMIZE=-Os
  BUILD_FLAGS_DEP=-MMD
  BUILD_FLAGS_COMMON=-g -Wall -ffunction-sections -fdata-sections
  BUILD_COMMAND_SIZE=avr-size
  BUILD_COMMAND_LINKER=avr-gcc
  BUILD_COMMAND_OBJDUMP=avr-objdump
  BUILD_COMMAND_OBJCOPY=avr-objcopy
  BUILD_COMMAND_AR=avr-ar
  BUILD_COMMAND_G__=avr-g++
  BUILD_COMMAND_GCC=avr-gcc
  BUILD_TOOLCHAIN=avr/bin/
  BUILD_WARN_DATA_PERCENTAGE=94
  BUILD_MCU=at90usb1286
  BUILD_CORE=teensy
  BUILD_BOARD=TEENSY2PP
  UPLOAD_PORT_MODELID=0x1C
  UPLOAD_PROTOCOL=teensy
  UPLOAD_TOOL=teensyloader
  UPLOAD_TOOL_TEENSY=teensyloader
  UPLOAD_TOOL_DEFAULT=teensyloader
  UPLOAD_MAXIMUM_DATA_SIZE=8192
  UPLOAD_MAXIMUM_SIZE=130048
  NAME=Teensy++ 2.0
  ifeq (${IN_USB}, serial)
    UPLOAD_PORT_USBTYPE=USB_SERIAL
    BUILD_USBTYPE=USB_SERIAL
  else ifeq (${IN_USB}, hid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID
    BUILD_USBTYPE=USB_HID
  else ifeq (${IN_USB}, serialhid)
    UPLOAD_PORT_USBTYPE=USB_SERIAL_HID
    BUILD_USBTYPE=USB_SERIAL_HID
  else ifeq (${IN_USB}, int_disk)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_DISK
    BUILD_ELFPATCH=mktinyfat
    BUILD_USBTYPE=USB_DISK
  else ifeq (${IN_USB}, sd_disk)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_DISK_SDFLASH
    BUILD_USBTYPE=USB_DISK_SDFLASH
  else ifeq (${IN_USB}, midi)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI
    BUILD_USBTYPE=USB_MIDI
  else ifeq (${IN_USB}, rawhid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_RAWHID
    BUILD_USBTYPE=USB_RAWHID
  else ifeq (${IN_USB}, flightsim)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM
    BUILD_USBTYPE=USB_FLIGHTSIM
  endif
  ifeq (${IN_SPEED}, 16)
    BUILD_FCPU=16000000L
  else ifeq (${IN_SPEED}, 8)
    BUILD_FCPU=8000000L
  else ifeq (${IN_SPEED}, 4)
    BUILD_FCPU=4000000L
  else ifeq (${IN_SPEED}, 2)
    BUILD_FCPU=2000000L
  else ifeq (${IN_SPEED}, 1)
    BUILD_FCPU=1000000L
  endif
  ifeq (${IN_KEYS}, en-us)
    BUILD_KEYLAYOUT=US_ENGLISH
  else ifeq (${IN_KEYS}, fr-ca)
    BUILD_KEYLAYOUT=CANADIAN_FRENCH
  else ifeq (${IN_KEYS}, xx-ca)
    BUILD_KEYLAYOUT=CANADIAN_MULTILINGUAL
  else ifeq (${IN_KEYS}, cz-cz)
    BUILD_KEYLAYOUT=CZECH
  else ifeq (${IN_KEYS}, da-da)
    BUILD_KEYLAYOUT=DANISH
  else ifeq (${IN_KEYS}, fi-fi)
    BUILD_KEYLAYOUT=FINNISH
  else ifeq (${IN_KEYS}, fr-fr)
    BUILD_KEYLAYOUT=FRENCH
  else ifeq (${IN_KEYS}, fr-be)
    BUILD_KEYLAYOUT=FRENCH_BELGIAN
  else ifeq (${IN_KEYS}, fr-ch)
    BUILD_KEYLAYOUT=FRENCH_SWISS
  else ifeq (${IN_KEYS}, de-de)
    BUILD_KEYLAYOUT=GERMAN
  else ifeq (${IN_KEYS}, de-dm)
    BUILD_KEYLAYOUT=GERMAN_MAC
  else ifeq (${IN_KEYS}, de-ch)
    BUILD_KEYLAYOUT=GERMAN_SWISS
  else ifeq (${IN_KEYS}, is-is)
    BUILD_KEYLAYOUT=ICELANDIC
  else ifeq (${IN_KEYS}, en-ie)
    BUILD_KEYLAYOUT=IRISH
  else ifeq (${IN_KEYS}, it-it)
    BUILD_KEYLAYOUT=ITALIAN
  else ifeq (${IN_KEYS}, no-no)
    BUILD_KEYLAYOUT=NORWEGIAN
  else ifeq (${IN_KEYS}, pt-pt)
    BUILD_KEYLAYOUT=PORTUGUESE
  else ifeq (${IN_KEYS}, pt-br)
    BUILD_KEYLAYOUT=PORTUGUESE_BRAZILIAN
  else ifeq (${IN_KEYS}, rs-rs)
    BUILD_KEYLAYOUT=SERBIAN_LATIN_ONLY
  else ifeq (${IN_KEYS}, es-es)
    BUILD_KEYLAYOUT=SPANISH
  else ifeq (${IN_KEYS}, es-mx)
    BUILD_KEYLAYOUT=SPANISH_LATIN_AMERICA
  else ifeq (${IN_KEYS}, sv-se)
    BUILD_KEYLAYOUT=SWEDISH
  else ifeq (${IN_KEYS}, tr-tr)
    BUILD_KEYLAYOUT=TURKISH
  else ifeq (${IN_KEYS}, en-gb)
    BUILD_KEYLAYOUT=UNITED_KINGDOM
  else ifeq (${IN_KEYS}, usint)
    BUILD_KEYLAYOUT=US_INTERNATIONAL
  endif
else ifeq (${BOARD_NAME}, teensy2)
  SERIAL_RESTART_CMD=true
  BUILD_SERIAL_NUMBER=true
  BUILD_FLAGS_LIBS=-lm
  BUILD_FLAGS_LD=-Wl,--gc-sections,--relax
  BUILD_FLAGS_S=-x assembler-with-cpp
  BUILD_FLAGS_CPP=-fno-exceptions -fpermissive -felide-constructors -std=gnu++11
  BUILD_FLAGS_DEFS=-DTEENSYDUINO=157 -DARDUINO_ARCH_AVR
  BUILD_FLAGS_CPU=-mmcu=atmega32u4
  BUILD_FLAGS_OPTIMIZE=-Os
  BUILD_FLAGS_DEP=-MMD
  BUILD_FLAGS_COMMON=-g -Wall -ffunction-sections -fdata-sections
  BUILD_COMMAND_SIZE=avr-size
  BUILD_COMMAND_LINKER=avr-gcc
  BUILD_COMMAND_OBJDUMP=avr-objdump
  BUILD_COMMAND_OBJCOPY=avr-objcopy
  BUILD_COMMAND_AR=avr-ar
  BUILD_COMMAND_G__=avr-g++
  BUILD_COMMAND_GCC=avr-gcc
  BUILD_TOOLCHAIN=avr/bin/
  BUILD_WARN_DATA_PERCENTAGE=80
  BUILD_MCU=atmega32u4
  BUILD_CORE=teensy
  BUILD_BOARD=TEENSY2
  UPLOAD_PORT_MODELID=0x1B
  UPLOAD_PROTOCOL=teensy
  UPLOAD_TOOL=teensyloader
  UPLOAD_TOOL_TEENSY=teensyloader
  UPLOAD_TOOL_DEFAULT=teensyloader
  UPLOAD_MAXIMUM_DATA_SIZE=2560
  UPLOAD_MAXIMUM_SIZE=32256
  NAME=Teensy 2.0
  ifeq (${IN_USB}, serial)
    UPLOAD_PORT_USBTYPE=USB_SERIAL
    BUILD_USBTYPE=USB_SERIAL
  else ifeq (${IN_USB}, hid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_HID
    BUILD_USBTYPE=USB_HID
  else ifeq (${IN_USB}, serialhid)
    UPLOAD_PORT_USBTYPE=USB_SERIAL_HID
    BUILD_USBTYPE=USB_SERIAL_HID
  else ifeq (${IN_USB}, int_disk)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_DISK
    BUILD_ELFPATCH=mktinyfat
    BUILD_USBTYPE=USB_DISK
  else ifeq (${IN_USB}, sd_disk)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_DISK_SDFLASH
    BUILD_USBTYPE=USB_DISK_SDFLASH
  else ifeq (${IN_USB}, midi)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_MIDI
    BUILD_USBTYPE=USB_MIDI
  else ifeq (${IN_USB}, rawhid)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_RAWHID
    BUILD_USBTYPE=USB_RAWHID
  else ifeq (${IN_USB}, flightsim)
    FAKE_SERIAL=teensy_gateway
    UPLOAD_PORT_USBTYPE=USB_FLIGHTSIM
    BUILD_USBTYPE=USB_FLIGHTSIM
  endif
  ifeq (${IN_SPEED}, 16)
    BUILD_FCPU=16000000L
  else ifeq (${IN_SPEED}, 8)
    BUILD_FCPU=8000000L
  else ifeq (${IN_SPEED}, 4)
    BUILD_FCPU=4000000L
  else ifeq (${IN_SPEED}, 2)
    BUILD_FCPU=2000000L
  else ifeq (${IN_SPEED}, 1)
    BUILD_FCPU=1000000L
  endif
  ifeq (${IN_KEYS}, en-us)
    BUILD_KEYLAYOUT=US_ENGLISH
  else ifeq (${IN_KEYS}, fr-ca)
    BUILD_KEYLAYOUT=CANADIAN_FRENCH
  else ifeq (${IN_KEYS}, xx-ca)
    BUILD_KEYLAYOUT=CANADIAN_MULTILINGUAL
  else ifeq (${IN_KEYS}, cz-cz)
    BUILD_KEYLAYOUT=CZECH
  else ifeq (${IN_KEYS}, da-da)
    BUILD_KEYLAYOUT=DANISH
  else ifeq (${IN_KEYS}, fi-fi)
    BUILD_KEYLAYOUT=FINNISH
  else ifeq (${IN_KEYS}, fr-fr)
    BUILD_KEYLAYOUT=FRENCH
  else ifeq (${IN_KEYS}, fr-be)
    BUILD_KEYLAYOUT=FRENCH_BELGIAN
  else ifeq (${IN_KEYS}, fr-ch)
    BUILD_KEYLAYOUT=FRENCH_SWISS
  else ifeq (${IN_KEYS}, de-de)
    BUILD_KEYLAYOUT=GERMAN
  else ifeq (${IN_KEYS}, de-dm)
    BUILD_KEYLAYOUT=GERMAN_MAC
  else ifeq (${IN_KEYS}, de-ch)
    BUILD_KEYLAYOUT=GERMAN_SWISS
  else ifeq (${IN_KEYS}, is-is)
    BUILD_KEYLAYOUT=ICELANDIC
  else ifeq (${IN_KEYS}, en-ie)
    BUILD_KEYLAYOUT=IRISH
  else ifeq (${IN_KEYS}, it-it)
    BUILD_KEYLAYOUT=ITALIAN
  else ifeq (${IN_KEYS}, no-no)
    BUILD_KEYLAYOUT=NORWEGIAN
  else ifeq (${IN_KEYS}, pt-pt)
    BUILD_KEYLAYOUT=PORTUGUESE
  else ifeq (${IN_KEYS}, pt-br)
    BUILD_KEYLAYOUT=PORTUGUESE_BRAZILIAN
  else ifeq (${IN_KEYS}, rs-rs)
    BUILD_KEYLAYOUT=SERBIAN_LATIN_ONLY
  else ifeq (${IN_KEYS}, es-es)
    BUILD_KEYLAYOUT=SPANISH
  else ifeq (${IN_KEYS}, es-mx)
    BUILD_KEYLAYOUT=SPANISH_LATIN_AMERICA
  else ifeq (${IN_KEYS}, sv-se)
    BUILD_KEYLAYOUT=SWEDISH
  else ifeq (${IN_KEYS}, tr-tr)
    BUILD_KEYLAYOUT=TURKISH
  else ifeq (${IN_KEYS}, en-gb)
    BUILD_KEYLAYOUT=UNITED_KINGDOM
  else ifeq (${IN_KEYS}, usint)
    BUILD_KEYLAYOUT=US_INTERNATIONAL
  endif
endif
BUILD_CORE_PATH=${RUNTIME_PLATFORM_PATH}/cores/${BUILD_CORE}
ifeq (${BOARD_NAME}, teensy41)
  BUILD_FLAGS_LD=-Wl,--gc-sections,--relax "-T${BUILD_CORE_PATH}/imxrt1062_t41.ld"
else ifeq (${BOARD_NAME}, teensyMM)
  BUILD_FLAGS_LD=-Wl,--gc-sections,--relax "-T${BUILD_CORE_PATH}/imxrt1062_mm.ld"
else ifeq (${BOARD_NAME}, teensy40)
  BUILD_FLAGS_LD=-Wl,--gc-sections,--relax "-T${BUILD_CORE_PATH}/imxrt1062.ld"
else ifeq (${BOARD_NAME}, teensy36)
  BUILD_FLAGS_LD=-Wl,--gc-sections,--relax,--defsym=__rtc_localtime=${EXTRA_TIME_LOCAL} "-T${BUILD_CORE_PATH}/mk66fx1m0.ld"
else ifeq (${BOARD_NAME}, teensy35)
  BUILD_FLAGS_LD=-Wl,--gc-sections,--relax,--defsym=__rtc_localtime=${EXTRA_TIME_LOCAL} "-T${BUILD_CORE_PATH}/mk64fx512.ld"
else ifeq (${BOARD_NAME}, teensy31)
  BUILD_FLAGS_LD=-Wl,--gc-sections,--relax,--defsym=__rtc_localtime=${EXTRA_TIME_LOCAL} "-T${BUILD_CORE_PATH}/mk20dx256.ld"
else ifeq (${BOARD_NAME}, teensy30)
  BUILD_FLAGS_LD=-Wl,--gc-sections,--relax,--defsym=__rtc_localtime=${EXTRA_TIME_LOCAL} "-T${BUILD_CORE_PATH}/mk20dx128.ld"
else ifeq (${BOARD_NAME}, teensyLC)
  BUILD_FLAGS_LD=-Wl,--gc-sections,--relax,--defsym=__rtc_localtime=${EXTRA_TIME_LOCAL} "-T${BUILD_CORE_PATH}/mkl26z64.ld"
endif
DISCOVERY_TEENSY_PATTERN="${RUNTIME_HARDWARE_PATH}/../tools/teensy_ports" -J2
TEENSYTOOLS_PATH=${RUNTIME_HARDWARE_PATH}/../tools/
COMPILER_ELF2HEX_FLAGS=-O ihex -R .eeprom
COMPILER_OBJCOPY_EEP_FLAGS=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
COMPILER_PATH=${RUNTIME_HARDWARE_PATH}/../tools/
REWRITING=disabled
VERSION=1.8.5
NAME=Teensyduino
ifeq (${UPLOAD_USE_1200BPS_TOUCH}, true)
  UPLOAD_EXTRA_FLAGS=--touch 1200
endif
ifeq (${UPLOAD_TOOL}, teensyloader)
  UPLOAD_PATTERN="${CMD_PATH}/teensy_post_compile" "-file=${BUILD_PROJECT_NAME}" "-path=$(abspath ${BUILD_PATH})" "-tools=${CMD_PATH}" "-board=${BUILD_BOARD}" -reboot "-port=${SERIAL_PORT}" "-portlabel=${SERIAL_PORT_LABEL}" "-portprotocol=${SERIAL_PORT_PROTOCOL}"
endif
ifeq (${BUILD_CORE}, teensy4)
  C_SYS_SRCS+=src/__test__/hardware/teensy/avr/cores/teensy4/analog.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/bootdata.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/clockspeed.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/debugprintf.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/delay.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/digital.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/eeprom.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/extmem.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/fuse.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/interrupt.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/keylayouts.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/nonstd.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/pwm.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/rtc.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_alloc_valid.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_calloc.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_free.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_hash.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_malloc.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_malloc_stats.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_pool.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_realloc.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_realloc_i.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_realloc_move.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_szalloc.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_util.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/sm_zalloc.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/startup.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/tempmon.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_desc.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_joystick.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_keyboard.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_midi.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_mouse.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_mtp.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_rawhid.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_seremu.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_serial.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_serial2.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_serial3.c \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_touch.c
  CPP_SYS_SRCS+=src/__test__/hardware/teensy/avr/cores/teensy4/AudioStream.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/CrashReport.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/DMAChannel.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/EventResponder.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/HardwareSerial.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/HardwareSerial1.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/HardwareSerial2.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/HardwareSerial3.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/HardwareSerial4.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/HardwareSerial5.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/HardwareSerial6.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/HardwareSerial7.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/HardwareSerial8.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/IntervalTimer.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/IPAddress.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/main.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/new.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/Print.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEvent.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEvent1.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEvent2.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEvent3.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEvent4.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEvent5.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEvent6.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEvent7.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEvent8.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEventUSB1.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/serialEventUSB2.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/Stream.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/Time.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/Tone.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_audio.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_flightsim.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/usb_inst.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/WMath.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/WString.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy4/yield.cpp
  S_SYS_SRCS+=src/__test__/hardware/teensy/avr/cores/teensy4/memcpy-armv7m.S \
    src/__test__/hardware/teensy/avr/cores/teensy4/memset.S
  SYS_INCLUDES+= -Isrc/__test__/hardware/teensy/avr/cores/teensy4
  VPATH_CORE+=src/__test__/hardware/teensy/avr/cores/teensy4
else ifeq (${BUILD_CORE}, teensy3)
  C_SYS_SRCS+=src/__test__/hardware/teensy/avr/cores/teensy3/analog.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/eeprom.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/keylayouts.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/math_helper.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/mk20dx128.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/nonstd.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/pins_teensy.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/serial1.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/serial2.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/serial3.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/serial4.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/serial5.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/serial6.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/serial6_lpuart.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/ser_print.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/touch.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_desc.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_dev.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_joystick.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_keyboard.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_mem.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_midi.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_mouse.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_mtp.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_rawhid.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_seremu.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_serial.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_serial2.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_serial3.c \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_touch.c
  CPP_SYS_SRCS+=src/__test__/hardware/teensy/avr/cores/teensy3/AudioStream.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/avr_emulation.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/CrashReport.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/DMAChannel.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/EventResponder.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/HardwareSerial.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/HardwareSerial1.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/HardwareSerial2.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/HardwareSerial3.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/HardwareSerial4.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/HardwareSerial5.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/HardwareSerial6.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/IntervalTimer.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/IPAddress.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/main.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/new.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/Print.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/serialEvent.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/serialEvent1.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/serialEvent2.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/serialEvent3.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/serialEvent4.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/serialEvent5.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/serialEvent6.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/serialEventUSB1.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/serialEventUSB2.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/Stream.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/Time.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/Tone.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_audio.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_flightsim.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/usb_inst.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/WMath.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/WString.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy3/yield.cpp
  S_SYS_SRCS+=src/__test__/hardware/teensy/avr/cores/teensy3/memcpy-armv7m.S \
    src/__test__/hardware/teensy/avr/cores/teensy3/memset.S
  SYS_INCLUDES+= -Isrc/__test__/hardware/teensy/avr/cores/teensy3
  VPATH_CORE+=src/__test__/hardware/teensy/avr/cores/teensy3
else ifeq (${BUILD_CORE}, teensy)
  C_SYS_SRCS+=src/__test__/hardware/teensy/avr/cores/teensy/keylayouts.c \
    src/__test__/hardware/teensy/avr/cores/teensy/malloc.c \
    src/__test__/hardware/teensy/avr/cores/teensy/pins_teensy.c \
    src/__test__/hardware/teensy/avr/cores/teensy/usb.c \
    src/__test__/hardware/teensy/avr/cores/teensy/WInterrupts.c \
    src/__test__/hardware/teensy/avr/cores/teensy/wiring.c
  CPP_SYS_SRCS+=src/__test__/hardware/teensy/avr/cores/teensy/CrashReport.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/HardwareSerial.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/IPAddress.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/main.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/new.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/Print.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/Stream.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/Time.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/Tone.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/usb_api.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/WMath.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/WString.cpp \
    src/__test__/hardware/teensy/avr/cores/teensy/yield.cpp
  SYS_INCLUDES+= -Isrc/__test__/hardware/teensy/avr/cores/teensy
  VPATH_CORE+=src/__test__/hardware/teensy/avr/cores/teensy
endif
SYS_SRC=${C_SYS_SRCS} ${CPP_SYS_SRCS} ${S_SYS_SRCS}
USER_SRC=${USER_C_SRCS} ${USER_CPP_SRCS} ${USER_S_SRCS}
ALL_SRC=${SYS_SRC} ${USER_SRC}
VPATH:=${VPATH}:${VPATH_MORE}:${VPATH_CORE}:${VPATH_VAR}
SYS_OBJS=\
  $(addprefix ${BUILD_PATH}/, \
    $(patsubst %.c, %.c.o, \
      $(patsubst %.cpp, %.cpp.o, \
        $(patsubst %.ino, %.ino.o, \
          $(patsubst %.S, %.S.o, $(notdir ${SYS_SRC}))))))
USER_OBJS=\
  $(addprefix ${BUILD_PATH}/, \
    $(patsubst %.c, %.c.o, \
      $(patsubst %.cpp, %.cpp.o, \
        $(patsubst %.ino, %.ino.o, \
          $(patsubst %.S, %.S.o, $(notdir ${USER_SRC}))))))
ALL_OBJS=${USER_OBJS} ${SYS_OBJS}
SYS_JSON=\
  $(addprefix ${BUILD_PATH}/, \
    $(patsubst %.c, %.c.json, \
      $(patsubst %.cpp, %.cpp.json, \
        $(patsubst %.ino, %.ino.json, \
          $(patsubst %.S, %.S.json, $(notdir ${SYS_SRC}))))))
USER_JSON=\
  $(addprefix ${BUILD_PATH}/, \
    $(patsubst %.c, %.c.json, \
      $(patsubst %.cpp, %.cpp.json, \
        $(patsubst %.ino, %.ino.json, \
          $(patsubst %.S, %.S.json, $(notdir ${USER_SRC}))))))

# And now the build rules!

# First, the phony rules that don't produce things
.PHONY: ${PROJ_NAME} flash clean allclean

# Now the default target
all: ${BUILD_PATH} ${PROJ_NAME}

# Some house keeping
clean:
	-rm ${USER_OBJS} ${USER_EXTRA}

allclean: clean
	-rm -rf ${BUILD_PATH}

# Make us rebuild user code if the makefile(s) change:
# Needs to be above the deps thing, I think
${USER_OBJS} : $(MAKEFILE_LIST)

# Let's start using the generated .d files...
-include $(ALL_OBJS:.o=.d)

# Next, the project name shortcut, because it's easier
${PROJ_NAME}: ${BUILD_PATH} ${BUILD_PATH}/${PROJ_NAME}.hex

# Add a 'flash' target
flash: ${BUILD_PATH}/${PROJ_NAME}.flash

# And finally, create the directory
${BUILD_PATH}:
ifeq ($(OS),Windows_NT)
	-@mkdir "$@"
else
	@test -d "$@" || mkdir -p "$@"
endif

# Now, on to the actual rules

${BUILD_PATH}/%.S.o : %.S
	"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_GCC}" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_S} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} ${SYS_INCLUDES} ${USER_INCLUDES} ${COMPILER_S_EXTRA_FLAGS} "$<" -o "$@"

${BUILD_PATH}/%.S.json : %.S
ifeq ($(OS),Windows_NT)
	@echo { "directory":"$(<D)", "file":"$(<F)", "command": > $@
	@echo "\"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_GCC}\" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_S} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} ${SYS_INCLUDES} ${USER_INCLUDES} ${COMPILER_S_EXTRA_FLAGS} \"$<\" -o \"$@\"" >> $@
	@echo }, >> $@
else
	@echo "{ \"directory\": \"$(<D)\",\"file\":\"$(<F)\"," > $@
	@echo "\"command\":\"\\\"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_GCC}\\\" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_S} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} ${SYS_INCLUDES} ${USER_INCLUDES} ${COMPILER_S_EXTRA_FLAGS} \\\"$<\\\" -o \\\"$@\\\"\"}," >> $@
endif

${BUILD_PATH}/%.c.o : %.c
	"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_GCC}" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_C} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} ${SYS_INCLUDES} ${USER_INCLUDES} ${COMPILER_C_EXTRA_FLAGS} "$<" -o "$@"

${BUILD_PATH}/%.c.json : %.c
ifeq ($(OS),Windows_NT)
	@echo { "directory":"$(<D)", "file":"$(<F)", "command": > $@
	@echo "\"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_GCC}\" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_C} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} ${SYS_INCLUDES} ${USER_INCLUDES} ${COMPILER_C_EXTRA_FLAGS} \"$<\" -o \"$@\"" >> $@
	@echo }, >> $@
else
	@echo "{ \"directory\": \"$(<D)\",\"file\":\"$(<F)\"," > $@
	@echo "\"command\":\"\\\"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_GCC}\\\" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_C} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} ${SYS_INCLUDES} ${USER_INCLUDES} ${COMPILER_C_EXTRA_FLAGS} \\\"$<\\\" -o \\\"$@\\\"\"}," >> $@
endif

${BUILD_PATH}/%.ino.o : %.ino
	"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_G__}" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_CPP} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} "-I${BUILD_PATH}/pch" ${SYS_INCLUDES} ${USER_INCLUDES} -x c++ ${COMPILER_INO_EXTRA_FLAGS} "$<" -o "$@"

${BUILD_PATH}/%.ino.json : %.ino
ifeq ($(OS),Windows_NT)
	@echo { "directory":"$(<D)", "file":"$(<F)", "command": > $@
	@echo "\"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_G__}\" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_CPP} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} \"-I${BUILD_PATH}/pch\" ${SYS_INCLUDES} ${USER_INCLUDES} -x c++ ${COMPILER_INO_EXTRA_FLAGS} \"$<\" -o \"$@\"" >> $@
	@echo }, >> $@
else
	@echo "{ \"directory\": \"$(<D)\",\"file\":\"$(<F)\"," > $@
	@echo "\"command\":\"\\\"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_G__}\\\" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_CPP} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} \\\"-I${BUILD_PATH}/pch\\\" ${SYS_INCLUDES} ${USER_INCLUDES} -x c++ ${COMPILER_INO_EXTRA_FLAGS} \\\"$<\\\" -o \\\"$@\\\"\"}," >> $@
endif

${BUILD_PATH}/%.cpp.o : %.cpp
	"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_G__}" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_CPP} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} "-I${BUILD_PATH}/pch" ${SYS_INCLUDES} ${USER_INCLUDES} ${COMPILER_CPP_EXTRA_FLAGS} "$<" -o "$@"

${BUILD_PATH}/%.cpp.json : %.cpp
ifeq ($(OS),Windows_NT)
	@echo { "directory":"$(<D)", "file":"$(<F)", "command": > $@
	@echo "\"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_G__}\" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_CPP} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} \"-I${BUILD_PATH}/pch\" ${SYS_INCLUDES} ${USER_INCLUDES} ${COMPILER_CPP_EXTRA_FLAGS} \"$<\" -o \"$@\"" >> $@
	@echo }, >> $@
else
	@echo "{ \"directory\": \"$(<D)\",\"file\":\"$(<F)\"," > $@
	@echo "\"command\":\"\\\"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_G__}\\\" -c ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_COMMON} ${BUILD_FLAGS_DEP} ${BUILD_FLAGS_CPP} ${BUILD_FLAGS_CPU} ${BUILD_FLAGS_DEFS} -DARDUINO=${RUNTIME_IDE_VERSION} -DARDUINO_${BUILD_BOARD} -DF_CPU=${BUILD_FCPU} -D${BUILD_USBTYPE} -DLAYOUT_${BUILD_KEYLAYOUT} \\\"-I${BUILD_PATH}/pch\\\" ${SYS_INCLUDES} ${USER_INCLUDES} ${COMPILER_CPP_EXTRA_FLAGS} \\\"$<\\\" -o \\\"$@\\\"\"}," >> $@
endif

${BUILD_PATH}/system.a : ${SYS_OBJS}
	"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_AR}" ${COMPILER_AR_EXTRA_FLAGS} rcs "$@" $^


${BUILD_PATH}/${BUILD_PROJECT_NAME}.elf : ${BUILD_PATH}/system.a ${USER_OBJS}
	"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_LINKER}" ${BUILD_FLAGS_OPTIMIZE} ${BUILD_FLAGS_LD} ${BUILD_FLAGS_LDSPECS} ${BUILD_FLAGS_CPU} ${COMPILER_ELF_EXTRA_FLAGS} -o "$@" ${USER_OBJS} "${BUILD_PATH}/system.a" "-L${BUILD_PATH}" ${BUILD_FLAGS_LIBS}


${BUILD_PATH}/${BUILD_PROJECT_NAME}.hex : ${BUILD_PATH}/${BUILD_PROJECT_NAME}.elf
	"${COMPILER_PATH}${BUILD_TOOLCHAIN}${BUILD_COMMAND_OBJCOPY}" ${COMPILER_ELF2HEX_FLAGS} "$<" "$@"

${BUILD_PATH}/${BUILD_PROJECT_NAME}.flash : ${BUILD_PATH}/${BUILD_PROJECT_NAME}.hex
	${UPLOAD_PATTERN} ${UPLOAD_EXTRA_FLAGS}


${BUILD_PATH}/compile_commands.json: ${USER_JSON} ${SYS_JSON}
ifeq ($(OS),Windows_NT)
	@echo [ > $@
	@sed -e "s/ / /" $^ >> $@
	@echo {}] >> $@
else
	@echo "[" > $@.tmp
	@cat $^ >> $@.tmp
	@echo "]" >> $@.tmp
	@sed -e ':a' -e 'N' -e '$$!ba' -e 's/},\n]/}]/g' $@.tmp > $@
endif

compile_commands: ${BUILD_PATH} ${BUILD_PATH}/compile_commands.json